using Api.Data_helper;using Api.Interface.IRepo;using AutoMapper;using Lib.Dto;using Lib.Dto.Supplier.Ctrl;using Lib.Entities;using Microsoft.EntityFrameworkCore;namespace Api.Repository{    public class SupplierRepository : ISupplierRepository    {        private readonly DatabaseContext _db;        private readonly IMapper _mapper;        public SupplierRepository(DatabaseContext db, IMapper mapper)        {            _db = db;            _mapper = mapper;        }        //Create        public async Task<DtoResult<SupplierDto>> Create(SupplierDto model)        {            try            {                var sup = await _db.Suppliers.FirstOrDefaultAsync(                    s => s.brandName.Equals(model.brandName));                if (sup != null)                {                    return new()                    {                        Status = false,                        Message = "Supplier already exits"                    };                }                Supplier newSup = new Supplier()                {                    brandName = model.brandName,                    Phone = model.phone,                    Address = model.address                };                _db.Suppliers.Add(newSup);                await _db.SaveChangesAsync();                return new()                {                    Status = true,                    Message = "Create supplier successfully!"                };            }            catch (Exception ex)            {                return new()                {                    Status = false,                    Message = ex.Message                };            }        }        //GetAll        public async Task<IEnumerable<SupplierDto>> GetAll()        {            var list = await _db.Suppliers.ToListAsync();            var res = new List<SupplierDto>();            foreach (var sup in list)            {                res.Add(_mapper.Map<SupplierDto>(sup));            }            return res;        }        //GetId        public async Task<SupplierDto> GetById(int id)        {            var sup = await _db.Suppliers.FirstOrDefaultAsync(s => s.Id == id);            SupplierDto res = new SupplierDto();            if (sup != null)            {                res.id = sup.Id;                res.brandName = sup.brandName;                res.phone = sup.Phone;                res.address = sup.Address;                return res;            }            else            {                return null!;            }        }        //Edit        public async Task<DtoResult<SupplierDto>> Edit(SupplierDto model)        {            try            {                var sup = await _db.Suppliers.FirstOrDefaultAsync(                    s => s.Id.Equals(model.id));                if (sup != null)                {                    sup.brandName = model.brandName;                    sup.Phone = model.phone;                    sup.Address = model.address;                    await _db.SaveChangesAsync();                    return new DtoResult<SupplierDto>()                    {                        Status = true,                        Message = "Update Successfully!"                    };                }                else                {                    return new()                    {                        Status = false,                        Message = "Update Fail"                    };                }            }            catch (Exception ex)            {                return new()                {                    Status = false,                    Message = ex.Message                };            }        }        //Delete        public async Task<DtoResult<SupplierDto>> DeleteSup(int id)        {            try            {                var sup = await _db.Suppliers.FirstOrDefaultAsync(                    s => s.Id.Equals(id));                if (sup != null)                {                    _db.Suppliers.Remove(sup);                    await _db.SaveChangesAsync();                    return new()                    {                        Status = true,                        Message = "Delete successfully!"                    };                }                return new()                {                    Status = false,                    Message = "Delete Fail"                };            }            catch (Exception ex)            {                return new()                {                    Status = false,                    Message = ex.Message                };            }        }    }}