// <auto-generated />
using System;
using Api.Data_helper;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Api.Data_helper.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240109073050_v0")]
    partial class v0
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Lib.Entities.Address_store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Address_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Address_Id")
                        .IsUnique();

                    b.ToTable("tbAddress_store");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address_Id = 1
                        },
                        new
                        {
                            Id = 2,
                            Address_Id = 2
                        },
                        new
                        {
                            Id = 3,
                            Address_Id = 3
                        },
                        new
                        {
                            Id = 4,
                            Address_Id = 4
                        });
                });

            modelBuilder.Entity("Lib.Entities.Addresses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address_full")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ward_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbAddress");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address_full = "tuyen quang, ha hang, thuong giap",
                            District_code = "72",
                            Phone_code = "207",
                            Province_code = "8",
                            Ward_code = "2230"
                        },
                        new
                        {
                            Id = 2,
                            Address_full = "quang ninh , huyen binh lieu, dong van",
                            District_code = "198",
                            Phone_code = "203",
                            Province_code = "22",
                            Ward_code = "6847"
                        },
                        new
                        {
                            Id = 3,
                            Address_full = "soc trang, long phu, phu huu",
                            District_code = "946",
                            Phone_code = "299",
                            Province_code = "94",
                            Ward_code = "31657"
                        },
                        new
                        {
                            Id = 4,
                            Address_full = "cao bang , bao lac , thuong ha",
                            District_code = "43",
                            Phone_code = "206",
                            Province_code = "4",
                            Ward_code = "1327"
                        });
                });

            modelBuilder.Entity("Lib.Entities.Banner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Banner");
                });

            modelBuilder.Entity("Lib.Entities.Call_charges", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Duration_Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Duration_Id");

                    b.ToTable("tbCall_charges");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Duration_Id = 14,
                            Name = "Local ULT",
                            Price = 55f,
                            Unit = "cent/min"
                        },
                        new
                        {
                            Id = 2,
                            Duration_Id = 15,
                            Name = "Local M",
                            Price = 75f,
                            Unit = "cent/min"
                        },
                        new
                        {
                            Id = 3,
                            Duration_Id = 16,
                            Name = "Local",
                            Price = 70f,
                            Unit = "cent/min"
                        },
                        new
                        {
                            Id = 4,
                            Duration_Id = 16,
                            Name = "STD",
                            Price = 2.25f,
                            Unit = "$/min"
                        },
                        new
                        {
                            Id = 5,
                            Duration_Id = 16,
                            Name = "Messaging for mobiles",
                            Price = 1f,
                            Unit = "$/min"
                        },
                        new
                        {
                            Id = 6,
                            Duration_Id = 17,
                            Name = "Local",
                            Price = 60f,
                            Unit = "cent/min"
                        },
                        new
                        {
                            Id = 7,
                            Duration_Id = 17,
                            Name = "STD",
                            Price = 2f,
                            Unit = "$/min"
                        },
                        new
                        {
                            Id = 8,
                            Duration_Id = 17,
                            Name = "Messaging for mobiles",
                            Price = 1.15f,
                            Unit = "$/min"
                        },
                        new
                        {
                            Id = 9,
                            Duration_Id = 18,
                            Name = "Local",
                            Price = 60f,
                            Unit = "cent/min"
                        },
                        new
                        {
                            Id = 10,
                            Duration_Id = 18,
                            Name = "STD",
                            Price = 1.75f,
                            Unit = "$/min"
                        },
                        new
                        {
                            Id = 11,
                            Duration_Id = 18,
                            Name = "Messaging for mobiles",
                            Price = 1.12f,
                            Unit = "$/min"
                        });
                });

            modelBuilder.Entity("Lib.Entities.Connect_type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("First_Letter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Security_Deposit")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("tbConnect_type");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "dial-up",
                            First_Letter = "D",
                            Name = "Dial-up",
                            Security_Deposit = 325f
                        },
                        new
                        {
                            Id = 2,
                            Description = "Broad Band",
                            First_Letter = "B",
                            Name = "Broad Band",
                            Security_Deposit = 500f
                        },
                        new
                        {
                            Id = 3,
                            Description = "LandLine",
                            First_Letter = "L",
                            Name = "LandLine",
                            Security_Deposit = 250f
                        });
                });

            modelBuilder.Entity("Lib.Entities.Contract_Service", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContractCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Order_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TP_Contract_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Order_Id")
                        .IsUnique();

                    b.HasIndex("TP_Contract_Id");

                    b.ToTable("tbContract_Service");
                });

            modelBuilder.Entity("Lib.Entities.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("From")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Percent_discount")
                        .HasColumnType("real");

                    b.Property<int>("To")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("tbCoupon");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            From = 15,
                            Name = "code coupon",
                            Percent_discount = 25f,
                            To = 10
                        },
                        new
                        {
                            Id = 2,
                            From = 25,
                            Name = "code coupon 1",
                            Percent_discount = 50f,
                            To = 15
                        },
                        new
                        {
                            Id = 3,
                            From = 50,
                            Name = "code coupon 2",
                            Percent_discount = 75f,
                            To = 25
                        },
                        new
                        {
                            Id = 4,
                            From = 1000,
                            Name = "code coupon 3",
                            Percent_discount = 100f,
                            To = 50
                        });
                });

            modelBuilder.Entity("Lib.Entities.Duration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Package_Id")
                        .HasColumnType("int");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("Time")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Validate")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Package_Id");

                    b.ToTable("tbDuration");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Package_Id = 1,
                            Price = 50f,
                            Time = "10Hrs",
                            Validate = "1"
                        },
                        new
                        {
                            Id = 2,
                            Package_Id = 1,
                            Price = 130f,
                            Time = "30Hrs",
                            Validate = "3"
                        },
                        new
                        {
                            Id = 3,
                            Package_Id = 1,
                            Price = 260f,
                            Time = "60Hrs",
                            Validate = "6"
                        },
                        new
                        {
                            Id = 4,
                            Package_Id = 2,
                            Price = 75f,
                            Time = "Monthly",
                            Validate = "1"
                        },
                        new
                        {
                            Id = 5,
                            Package_Id = 2,
                            Price = 150f,
                            Time = "Quarterly",
                            Validate = "3"
                        },
                        new
                        {
                            Id = 6,
                            Package_Id = 3,
                            Price = 100f,
                            Time = "Monthly",
                            Validate = "1"
                        },
                        new
                        {
                            Id = 7,
                            Package_Id = 3,
                            Price = 180f,
                            Time = "Quarterly",
                            Validate = "3"
                        },
                        new
                        {
                            Id = 8,
                            Package_Id = 4,
                            Price = 175f,
                            Time = "30Hrs",
                            Validate = "1"
                        },
                        new
                        {
                            Id = 9,
                            Package_Id = 4,
                            Price = 315f,
                            Time = "60Hrs",
                            Validate = "3"
                        },
                        new
                        {
                            Id = 10,
                            Package_Id = 5,
                            Price = 225f,
                            Time = "Monthly",
                            Validate = "1"
                        },
                        new
                        {
                            Id = 11,
                            Package_Id = 5,
                            Price = 400f,
                            Time = "Quarterly",
                            Validate = "3"
                        },
                        new
                        {
                            Id = 12,
                            Package_Id = 6,
                            Price = 350f,
                            Time = "Monthly",
                            Validate = "1"
                        },
                        new
                        {
                            Id = 13,
                            Package_Id = 6,
                            Price = 445f,
                            Time = "Quarterly",
                            Validate = "3"
                        },
                        new
                        {
                            Id = 14,
                            Description = "Local ULT : 55 cent/min",
                            Package_Id = 7,
                            Price = 75f,
                            Time = "Unlimited",
                            Validate = "12"
                        },
                        new
                        {
                            Id = 15,
                            Description = "Local M: 75cent/min",
                            Package_Id = 7,
                            Price = 35f,
                            Time = "Monthly",
                            Validate = "1"
                        },
                        new
                        {
                            Id = 16,
                            Description = "Local: 70cent/min; STD:2.25$/min ; Messaging for mobiles:1$/min",
                            Package_Id = 8,
                            Price = 125f,
                            Time = "Monthly",
                            Validate = "1"
                        },
                        new
                        {
                            Id = 17,
                            Description = "Local: 60cent/min; STD:2$/min ; Messaging for mobiles:1.15$/min",
                            Package_Id = 8,
                            Price = 420f,
                            Time = "Half-Yearly",
                            Validate = "6"
                        },
                        new
                        {
                            Id = 18,
                            Description = "Local: 60cent/min; STD:1.75$/min ; Messaging for mobiles:1.12$/min",
                            Package_Id = 8,
                            Price = 799f,
                            Time = "Yearly",
                            Validate = "12"
                        });
                });

            modelBuilder.Entity("Lib.Entities.Duration_callCharges", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Call_charges_Id")
                        .HasColumnType("int");

                    b.Property<int>("Duration_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Call_charges_Id");

                    b.HasIndex("Duration_Id");

                    b.ToTable("tbDuration_callCharges");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Duration_Id = 1
                        },
                        new
                        {
                            Id = 2,
                            Duration_Id = 2
                        },
                        new
                        {
                            Id = 3,
                            Duration_Id = 3
                        },
                        new
                        {
                            Id = 4,
                            Duration_Id = 4
                        },
                        new
                        {
                            Id = 5,
                            Duration_Id = 5
                        },
                        new
                        {
                            Id = 6,
                            Duration_Id = 6
                        },
                        new
                        {
                            Id = 7,
                            Duration_Id = 7
                        },
                        new
                        {
                            Id = 8,
                            Duration_Id = 8
                        },
                        new
                        {
                            Id = 9,
                            Duration_Id = 9
                        },
                        new
                        {
                            Id = 10,
                            Duration_Id = 10
                        },
                        new
                        {
                            Id = 11,
                            Duration_Id = 11
                        },
                        new
                        {
                            Id = 12,
                            Duration_Id = 12
                        },
                        new
                        {
                            Id = 13,
                            Duration_Id = 13
                        },
                        new
                        {
                            Id = 14,
                            Call_charges_Id = 1,
                            Duration_Id = 14
                        },
                        new
                        {
                            Id = 15,
                            Call_charges_Id = 2,
                            Duration_Id = 15
                        },
                        new
                        {
                            Id = 16,
                            Call_charges_Id = 3,
                            Duration_Id = 16
                        },
                        new
                        {
                            Id = 17,
                            Call_charges_Id = 4,
                            Duration_Id = 16
                        },
                        new
                        {
                            Id = 18,
                            Call_charges_Id = 5,
                            Duration_Id = 16
                        },
                        new
                        {
                            Id = 19,
                            Call_charges_Id = 6,
                            Duration_Id = 17
                        },
                        new
                        {
                            Id = 20,
                            Call_charges_Id = 7,
                            Duration_Id = 17
                        },
                        new
                        {
                            Id = 21,
                            Call_charges_Id = 8,
                            Duration_Id = 17
                        },
                        new
                        {
                            Id = 22,
                            Call_charges_Id = 9,
                            Duration_Id = 18
                        },
                        new
                        {
                            Id = 23,
                            Call_charges_Id = 10,
                            Duration_Id = 18
                        },
                        new
                        {
                            Id = 24,
                            Call_charges_Id = 11,
                            Duration_Id = 18
                        });
                });

            modelBuilder.Entity("Lib.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Address_store_Id")
                        .HasColumnType("int");

                    b.Property<int>("Employee_type_Id")
                        .HasColumnType("int");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Address_store_Id");

                    b.HasIndex("Employee_type_Id");

                    b.ToTable("tbEmployee");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address_store_Id = 1,
                            Employee_type_Id = 1,
                            User_Id = 3
                        },
                        new
                        {
                            Id = 2,
                            Address_store_Id = 1,
                            Employee_type_Id = 2,
                            User_Id = 4
                        },
                        new
                        {
                            Id = 3,
                            Address_store_Id = 2,
                            Employee_type_Id = 1,
                            User_Id = 5
                        },
                        new
                        {
                            Id = 4,
                            Address_store_Id = 2,
                            Employee_type_Id = 2,
                            User_Id = 8
                        },
                        new
                        {
                            Id = 5,
                            Address_store_Id = 3,
                            Employee_type_Id = 1,
                            User_Id = 6
                        },
                        new
                        {
                            Id = 6,
                            Address_store_Id = 3,
                            Employee_type_Id = 2,
                            User_Id = 9
                        },
                        new
                        {
                            Id = 7,
                            Address_store_Id = 4,
                            Employee_type_Id = 1,
                            User_Id = 7
                        },
                        new
                        {
                            Id = 8,
                            Address_store_Id = 4,
                            Employee_type_Id = 2,
                            User_Id = 10
                        });
                });

            modelBuilder.Entity("Lib.Entities.Employee_type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbEmployee_type");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sale"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Technician"
                        });
                });

            modelBuilder.Entity("Lib.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Address_Store_Id")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Duration_Id")
                        .HasColumnType("int");

                    b.Property<string>("Reply")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Duration_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("Lib.Entities.ImportReceipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Product_Id")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Storage_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Product_Id");

                    b.HasIndex("Storage_id");

                    b.ToTable("tbImportReceipt");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Product_Id = 1,
                            Quantity = 10,
                            Status = "Done",
                            Storage_id = 1,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3500)
                        },
                        new
                        {
                            Id = 2,
                            Product_Id = 2,
                            Quantity = 15,
                            Status = "Done",
                            Storage_id = 1,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3520)
                        },
                        new
                        {
                            Id = 3,
                            Product_Id = 3,
                            Quantity = 20,
                            Status = "Done",
                            Storage_id = 1,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3530)
                        },
                        new
                        {
                            Id = 4,
                            Product_Id = 4,
                            Quantity = 30,
                            Status = "Done",
                            Storage_id = 1,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3530)
                        },
                        new
                        {
                            Id = 5,
                            Product_Id = 5,
                            Quantity = 10,
                            Status = "Done",
                            Storage_id = 1,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3530)
                        },
                        new
                        {
                            Id = 6,
                            Product_Id = 6,
                            Quantity = 15,
                            Status = "Done",
                            Storage_id = 1,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3530)
                        },
                        new
                        {
                            Id = 7,
                            Product_Id = 7,
                            Quantity = 20,
                            Status = "Done",
                            Storage_id = 1,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3540)
                        },
                        new
                        {
                            Id = 8,
                            Product_Id = 8,
                            Quantity = 30,
                            Status = "Done",
                            Storage_id = 1,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3540)
                        },
                        new
                        {
                            Id = 9,
                            Product_Id = 9,
                            Quantity = 10,
                            Status = "Done",
                            Storage_id = 1,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3540)
                        },
                        new
                        {
                            Id = 10,
                            Product_Id = 10,
                            Quantity = 15,
                            Status = "Done",
                            Storage_id = 1,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3540)
                        },
                        new
                        {
                            Id = 11,
                            Product_Id = 11,
                            Quantity = 20,
                            Status = "Done",
                            Storage_id = 1,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3540)
                        },
                        new
                        {
                            Id = 12,
                            Product_Id = 12,
                            Quantity = 30,
                            Status = "Done",
                            Storage_id = 1,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3550)
                        },
                        new
                        {
                            Id = 13,
                            Product_Id = 13,
                            Quantity = 10,
                            Status = "Done",
                            Storage_id = 1,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3550)
                        },
                        new
                        {
                            Id = 14,
                            Product_Id = 14,
                            Quantity = 15,
                            Status = "Done",
                            Storage_id = 1,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3550)
                        },
                        new
                        {
                            Id = 15,
                            Product_Id = 15,
                            Quantity = 20,
                            Status = "Done",
                            Storage_id = 1,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3550)
                        },
                        new
                        {
                            Id = 16,
                            Product_Id = 16,
                            Quantity = 30,
                            Status = "Done",
                            Storage_id = 1,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3550)
                        },
                        new
                        {
                            Id = 17,
                            Product_Id = 17,
                            Quantity = 15,
                            Status = "Done",
                            Storage_id = 1,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3560)
                        },
                        new
                        {
                            Id = 18,
                            Product_Id = 18,
                            Quantity = 20,
                            Status = "Done",
                            Storage_id = 1,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3560)
                        },
                        new
                        {
                            Id = 19,
                            Product_Id = 1,
                            Quantity = 10,
                            Status = "Done",
                            Storage_id = 2,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3560)
                        },
                        new
                        {
                            Id = 20,
                            Product_Id = 2,
                            Quantity = 15,
                            Status = "Done",
                            Storage_id = 2,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3560)
                        },
                        new
                        {
                            Id = 21,
                            Product_Id = 3,
                            Quantity = 20,
                            Status = "Done",
                            Storage_id = 2,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3560)
                        },
                        new
                        {
                            Id = 22,
                            Product_Id = 4,
                            Quantity = 30,
                            Status = "Done",
                            Storage_id = 2,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3570)
                        },
                        new
                        {
                            Id = 23,
                            Product_Id = 5,
                            Quantity = 10,
                            Status = "Done",
                            Storage_id = 2,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3570)
                        },
                        new
                        {
                            Id = 24,
                            Product_Id = 6,
                            Quantity = 15,
                            Status = "Done",
                            Storage_id = 2,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3570)
                        },
                        new
                        {
                            Id = 25,
                            Product_Id = 7,
                            Quantity = 20,
                            Status = "Done",
                            Storage_id = 2,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3570)
                        },
                        new
                        {
                            Id = 26,
                            Product_Id = 8,
                            Quantity = 30,
                            Status = "Done",
                            Storage_id = 2,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3570)
                        },
                        new
                        {
                            Id = 27,
                            Product_Id = 9,
                            Quantity = 10,
                            Status = "Done",
                            Storage_id = 2,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3580)
                        },
                        new
                        {
                            Id = 28,
                            Product_Id = 10,
                            Quantity = 15,
                            Status = "Done",
                            Storage_id = 2,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3580)
                        },
                        new
                        {
                            Id = 29,
                            Product_Id = 11,
                            Quantity = 20,
                            Status = "Done",
                            Storage_id = 2,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3580)
                        },
                        new
                        {
                            Id = 30,
                            Product_Id = 12,
                            Quantity = 30,
                            Status = "Done",
                            Storage_id = 2,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3580)
                        },
                        new
                        {
                            Id = 31,
                            Product_Id = 13,
                            Quantity = 10,
                            Status = "Done",
                            Storage_id = 2,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3580)
                        },
                        new
                        {
                            Id = 32,
                            Product_Id = 14,
                            Quantity = 15,
                            Status = "Done",
                            Storage_id = 2,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3580)
                        },
                        new
                        {
                            Id = 33,
                            Product_Id = 15,
                            Quantity = 20,
                            Status = "Done",
                            Storage_id = 2,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3590)
                        },
                        new
                        {
                            Id = 34,
                            Product_Id = 16,
                            Quantity = 30,
                            Status = "Done",
                            Storage_id = 2,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3590)
                        },
                        new
                        {
                            Id = 35,
                            Product_Id = 17,
                            Quantity = 15,
                            Status = "Done",
                            Storage_id = 2,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3590)
                        },
                        new
                        {
                            Id = 36,
                            Product_Id = 18,
                            Quantity = 20,
                            Status = "Done",
                            Storage_id = 2,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3590)
                        },
                        new
                        {
                            Id = 37,
                            Product_Id = 1,
                            Quantity = 10,
                            Status = "Done",
                            Storage_id = 3,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3590)
                        },
                        new
                        {
                            Id = 38,
                            Product_Id = 2,
                            Quantity = 15,
                            Status = "Done",
                            Storage_id = 3,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3600)
                        },
                        new
                        {
                            Id = 39,
                            Product_Id = 3,
                            Quantity = 20,
                            Status = "Done",
                            Storage_id = 3,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3600)
                        },
                        new
                        {
                            Id = 40,
                            Product_Id = 4,
                            Quantity = 30,
                            Status = "Done",
                            Storage_id = 3,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3600)
                        },
                        new
                        {
                            Id = 41,
                            Product_Id = 5,
                            Quantity = 10,
                            Status = "Done",
                            Storage_id = 3,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3600)
                        },
                        new
                        {
                            Id = 42,
                            Product_Id = 6,
                            Quantity = 15,
                            Status = "Done",
                            Storage_id = 3,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3600)
                        },
                        new
                        {
                            Id = 43,
                            Product_Id = 7,
                            Quantity = 20,
                            Status = "Done",
                            Storage_id = 3,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3610)
                        },
                        new
                        {
                            Id = 44,
                            Product_Id = 8,
                            Quantity = 30,
                            Status = "Done",
                            Storage_id = 3,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3610)
                        },
                        new
                        {
                            Id = 45,
                            Product_Id = 9,
                            Quantity = 10,
                            Status = "Done",
                            Storage_id = 3,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3610)
                        },
                        new
                        {
                            Id = 46,
                            Product_Id = 10,
                            Quantity = 15,
                            Status = "Done",
                            Storage_id = 3,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3610)
                        },
                        new
                        {
                            Id = 47,
                            Product_Id = 11,
                            Quantity = 20,
                            Status = "Done",
                            Storage_id = 3,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3610)
                        },
                        new
                        {
                            Id = 48,
                            Product_Id = 12,
                            Quantity = 30,
                            Status = "Done",
                            Storage_id = 3,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3620)
                        },
                        new
                        {
                            Id = 49,
                            Product_Id = 13,
                            Quantity = 10,
                            Status = "Done",
                            Storage_id = 3,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3620)
                        },
                        new
                        {
                            Id = 50,
                            Product_Id = 14,
                            Quantity = 15,
                            Status = "Done",
                            Storage_id = 3,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3620)
                        },
                        new
                        {
                            Id = 51,
                            Product_Id = 15,
                            Quantity = 20,
                            Status = "Done",
                            Storage_id = 3,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3620)
                        },
                        new
                        {
                            Id = 52,
                            Product_Id = 16,
                            Quantity = 30,
                            Status = "Done",
                            Storage_id = 3,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3620)
                        },
                        new
                        {
                            Id = 53,
                            Product_Id = 17,
                            Quantity = 15,
                            Status = "Done",
                            Storage_id = 3,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3620)
                        },
                        new
                        {
                            Id = 54,
                            Product_Id = 18,
                            Quantity = 20,
                            Status = "Done",
                            Storage_id = 3,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3630)
                        },
                        new
                        {
                            Id = 55,
                            Product_Id = 1,
                            Quantity = 10,
                            Status = "Done",
                            Storage_id = 4,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3630)
                        },
                        new
                        {
                            Id = 56,
                            Product_Id = 2,
                            Quantity = 15,
                            Status = "Done",
                            Storage_id = 4,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3630)
                        },
                        new
                        {
                            Id = 57,
                            Product_Id = 3,
                            Quantity = 20,
                            Status = "Done",
                            Storage_id = 4,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3630)
                        },
                        new
                        {
                            Id = 58,
                            Product_Id = 4,
                            Quantity = 30,
                            Status = "Done",
                            Storage_id = 4,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3630)
                        },
                        new
                        {
                            Id = 59,
                            Product_Id = 5,
                            Quantity = 10,
                            Status = "Done",
                            Storage_id = 4,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3640)
                        },
                        new
                        {
                            Id = 60,
                            Product_Id = 6,
                            Quantity = 15,
                            Status = "Done",
                            Storage_id = 4,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3640)
                        },
                        new
                        {
                            Id = 61,
                            Product_Id = 7,
                            Quantity = 20,
                            Status = "Done",
                            Storage_id = 4,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3640)
                        },
                        new
                        {
                            Id = 62,
                            Product_Id = 8,
                            Quantity = 30,
                            Status = "Done",
                            Storage_id = 4,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3640)
                        },
                        new
                        {
                            Id = 63,
                            Product_Id = 9,
                            Quantity = 10,
                            Status = "Done",
                            Storage_id = 4,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3640)
                        },
                        new
                        {
                            Id = 64,
                            Product_Id = 10,
                            Quantity = 15,
                            Status = "Done",
                            Storage_id = 4,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3650)
                        },
                        new
                        {
                            Id = 65,
                            Product_Id = 11,
                            Quantity = 20,
                            Status = "Done",
                            Storage_id = 4,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3650)
                        },
                        new
                        {
                            Id = 66,
                            Product_Id = 12,
                            Quantity = 30,
                            Status = "Done",
                            Storage_id = 4,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3650)
                        },
                        new
                        {
                            Id = 67,
                            Product_Id = 13,
                            Quantity = 10,
                            Status = "Done",
                            Storage_id = 4,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3650)
                        },
                        new
                        {
                            Id = 68,
                            Product_Id = 14,
                            Quantity = 15,
                            Status = "Done",
                            Storage_id = 4,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3650)
                        },
                        new
                        {
                            Id = 69,
                            Product_Id = 15,
                            Quantity = 20,
                            Status = "Done",
                            Storage_id = 4,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3660)
                        },
                        new
                        {
                            Id = 70,
                            Product_Id = 16,
                            Quantity = 30,
                            Status = "Done",
                            Storage_id = 4,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3660)
                        },
                        new
                        {
                            Id = 71,
                            Product_Id = 17,
                            Quantity = 15,
                            Status = "Done",
                            Storage_id = 4,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3660)
                        },
                        new
                        {
                            Id = 72,
                            Product_Id = 18,
                            Quantity = 20,
                            Status = "Done",
                            Storage_id = 4,
                            Time = new DateTime(2024, 1, 9, 14, 30, 49, 722, DateTimeKind.Local).AddTicks(3660)
                        });
                });

            modelBuilder.Entity("Lib.Entities.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Addresses_Id")
                        .HasColumnType("int");

                    b.Property<string>("ContractService_Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Coupon_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Duration_Id")
                        .HasColumnType("int");

                    b.Property<int?>("Duration_callCharges_Id")
                        .HasColumnType("int");

                    b.Property<int>("Numb_Connect")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tax")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Total_Price")
                        .HasColumnType("real");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Addresses_Id")
                        .IsUnique();

                    b.HasIndex("Coupon_Id");

                    b.HasIndex("Duration_Id");

                    b.HasIndex("Duration_callCharges_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("tbOrders");
                });

            modelBuilder.Entity("Lib.Entities.Order_handler", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Address_store_Id")
                        .HasColumnType("int");

                    b.Property<int>("Employee_Id")
                        .HasColumnType("int");

                    b.Property<string>("Order_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("StatusHandle")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Address_store_Id");

                    b.HasIndex("Employee_Id");

                    b.HasIndex("Order_Id");

                    b.ToTable("Order_handler");
                });

            modelBuilder.Entity("Lib.Entities.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Connect_type_Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Connect_type_Id");

                    b.ToTable("tbPackage");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Connect_type_Id = 1,
                            Name = "Hourly Basic"
                        },
                        new
                        {
                            Id = 2,
                            Connect_type_Id = 1,
                            Name = "Unlimited 28Kbps"
                        },
                        new
                        {
                            Id = 3,
                            Connect_type_Id = 1,
                            Name = "Unlimited 56Kbps"
                        },
                        new
                        {
                            Id = 4,
                            Connect_type_Id = 2,
                            Name = "Hourly Basic"
                        },
                        new
                        {
                            Id = 5,
                            Connect_type_Id = 2,
                            Name = "Unlimited 64Kbps"
                        },
                        new
                        {
                            Id = 6,
                            Connect_type_Id = 2,
                            Name = "Unlimited 128Kbps"
                        },
                        new
                        {
                            Id = 7,
                            Connect_type_Id = 3,
                            Name = "Local Plan= Rental + Callcharges"
                        },
                        new
                        {
                            Id = 8,
                            Connect_type_Id = 3,
                            Name = "STD Plan"
                        });
                });

            modelBuilder.Entity("Lib.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Method_Payment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Order_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Order_Id");

                    b.ToTable("tbPayment");
                });

            modelBuilder.Entity("Lib.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Connect_type_Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Numb_Connect")
                        .HasColumnType("int");

                    b.Property<int>("Supplier_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Connect_type_Id");

                    b.HasIndex("Supplier_Id");

                    b.ToTable("tbProduct");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Connect_type_Id = 1,
                            Name = "UniFi AC Lite",
                            Numb_Connect = 10,
                            Supplier_Id = 1
                        },
                        new
                        {
                            Id = 2,
                            Connect_type_Id = 1,
                            Name = "UniFi AC Pro",
                            Numb_Connect = 15,
                            Supplier_Id = 1
                        },
                        new
                        {
                            Id = 3,
                            Connect_type_Id = 1,
                            Name = "UniFi AC Nano",
                            Numb_Connect = 25,
                            Supplier_Id = 1
                        },
                        new
                        {
                            Id = 4,
                            Connect_type_Id = 1,
                            Name = "UniFi AC NanoPro",
                            Numb_Connect = 51,
                            Supplier_Id = 1
                        },
                        new
                        {
                            Id = 5,
                            Connect_type_Id = 1,
                            Name = "GrandStream AC Lite",
                            Numb_Connect = 10,
                            Supplier_Id = 2
                        },
                        new
                        {
                            Id = 6,
                            Connect_type_Id = 1,
                            Name = "GrandStream AC Pro",
                            Numb_Connect = 15,
                            Supplier_Id = 2
                        },
                        new
                        {
                            Id = 7,
                            Connect_type_Id = 1,
                            Name = "GrandStream AC Nano",
                            Numb_Connect = 25,
                            Supplier_Id = 2
                        },
                        new
                        {
                            Id = 8,
                            Connect_type_Id = 1,
                            Name = "GrandStream AC NanoPro",
                            Numb_Connect = 51,
                            Supplier_Id = 2
                        },
                        new
                        {
                            Id = 9,
                            Connect_type_Id = 2,
                            Name = "UniFi AC Lite Max",
                            Numb_Connect = 10,
                            Supplier_Id = 1
                        },
                        new
                        {
                            Id = 10,
                            Connect_type_Id = 2,
                            Name = "UniFi AC Pro Max",
                            Numb_Connect = 15,
                            Supplier_Id = 1
                        },
                        new
                        {
                            Id = 11,
                            Connect_type_Id = 2,
                            Name = "UniFi AC Nano Max",
                            Numb_Connect = 25,
                            Supplier_Id = 1
                        },
                        new
                        {
                            Id = 12,
                            Connect_type_Id = 2,
                            Name = "UniFi AC NanoPro Max",
                            Numb_Connect = 51,
                            Supplier_Id = 1
                        },
                        new
                        {
                            Id = 13,
                            Connect_type_Id = 2,
                            Name = "GrandStream AC Lite Max",
                            Numb_Connect = 10,
                            Supplier_Id = 2
                        },
                        new
                        {
                            Id = 14,
                            Connect_type_Id = 2,
                            Name = "GrandStream AC Pro Max",
                            Numb_Connect = 15,
                            Supplier_Id = 2
                        },
                        new
                        {
                            Id = 15,
                            Connect_type_Id = 2,
                            Name = "GrandStream AC Nano Max",
                            Numb_Connect = 25,
                            Supplier_Id = 2
                        },
                        new
                        {
                            Id = 16,
                            Connect_type_Id = 2,
                            Name = "GrandStream AC NanoPro Max",
                            Numb_Connect = 51,
                            Supplier_Id = 2
                        },
                        new
                        {
                            Id = 17,
                            Connect_type_Id = 3,
                            Name = "KXTS500",
                            Numb_Connect = 10,
                            Supplier_Id = 3
                        },
                        new
                        {
                            Id = 18,
                            Connect_type_Id = 3,
                            Name = "IP Fanvil X7A",
                            Numb_Connect = 15,
                            Supplier_Id = 3
                        });
                });

            modelBuilder.Entity("Lib.Entities.Storage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Address_store_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Address_store_id")
                        .IsUnique();

                    b.ToTable("tbStorage");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address_store_id = 1
                        },
                        new
                        {
                            Id = 2,
                            Address_store_id = 2
                        },
                        new
                        {
                            Id = 3,
                            Address_store_id = 3
                        },
                        new
                        {
                            Id = 4,
                            Address_store_id = 4
                        });
                });

            modelBuilder.Entity("Lib.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("brandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbSupplier");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "ha noi",
                            Phone = "0462146762",
                            brandName = "UniFi"
                        },
                        new
                        {
                            Id = 2,
                            Address = "ha noi",
                            Phone = "0646272131",
                            brandName = "Grandstream"
                        },
                        new
                        {
                            Id = 3,
                            Address = "ha noi",
                            Phone = "0646272131",
                            brandName = "Panasonic"
                        });
                });

            modelBuilder.Entity("Lib.Entities.TP_contract", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("tbTP_contract");
                });

            modelBuilder.Entity("Lib.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Employees_Id")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MethodReset")
                        .HasColumnType("int");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PasswordReset")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TP_contract_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("TokenCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TokenExpires")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Employees_Id")
                        .IsUnique()
                        .HasFilter("[Employees_Id] IS NOT NULL");

                    b.HasIndex("TP_contract_Id")
                        .IsUnique()
                        .HasFilter("[TP_contract_Id] IS NOT NULL");

                    b.ToTable("tbUser");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FullName = "Nguyen Van Thien",
                            PasswordHash = new byte[] { 1, 209, 143, 58, 55, 27, 86, 235, 71, 145, 168, 213, 9, 203, 130, 189, 107, 105, 254, 34, 214, 88, 132, 81, 250, 84, 218, 149, 75, 228, 66, 44, 253, 175, 44, 143, 137, 209, 237, 54, 24, 9, 72, 23, 181, 109, 154, 113, 66, 210, 214, 101, 32, 146, 96, 181, 157, 52, 192, 114, 78, 203, 162, 22 },
                            PasswordSalt = new byte[] { 131, 136, 217, 21, 66, 89, 133, 12, 198, 224, 251, 104, 121, 196, 43, 128, 216, 238, 11, 10, 242, 204, 180, 7, 243, 219, 150, 46, 185, 95, 169, 99, 13, 164, 7, 213, 9, 157, 74, 147, 23, 139, 93, 3, 194, 119, 129, 27, 206, 87, 151, 97, 37, 252, 156, 36, 73, 92, 156, 213, 60, 124, 109, 105, 144, 18, 185, 90, 237, 168, 200, 239, 47, 194, 209, 129, 13, 106, 211, 228, 206, 30, 248, 69, 164, 75, 200, 181, 80, 98, 74, 144, 195, 142, 124, 68, 85, 223, 152, 1, 173, 206, 143, 153, 207, 122, 112, 162, 116, 206, 223, 184, 93, 15, 240, 72, 63, 104, 41, 158, 155, 96, 215, 101, 9, 121, 1, 242 },
                            Phone = "0932859395",
                            RefreshToken = "",
                            Role = "user",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 2,
                            FullName = "admin",
                            PasswordHash = new byte[] { 1, 209, 143, 58, 55, 27, 86, 235, 71, 145, 168, 213, 9, 203, 130, 189, 107, 105, 254, 34, 214, 88, 132, 81, 250, 84, 218, 149, 75, 228, 66, 44, 253, 175, 44, 143, 137, 209, 237, 54, 24, 9, 72, 23, 181, 109, 154, 113, 66, 210, 214, 101, 32, 146, 96, 181, 157, 52, 192, 114, 78, 203, 162, 22 },
                            PasswordSalt = new byte[] { 131, 136, 217, 21, 66, 89, 133, 12, 198, 224, 251, 104, 121, 196, 43, 128, 216, 238, 11, 10, 242, 204, 180, 7, 243, 219, 150, 46, 185, 95, 169, 99, 13, 164, 7, 213, 9, 157, 74, 147, 23, 139, 93, 3, 194, 119, 129, 27, 206, 87, 151, 97, 37, 252, 156, 36, 73, 92, 156, 213, 60, 124, 109, 105, 144, 18, 185, 90, 237, 168, 200, 239, 47, 194, 209, 129, 13, 106, 211, 228, 206, 30, 248, 69, 164, 75, 200, 181, 80, 98, 74, 144, 195, 142, 124, 68, 85, 223, 152, 1, 173, 206, 143, 153, 207, 122, 112, 162, 116, 206, 223, 184, 93, 15, 240, 72, 63, 104, 41, 158, 155, 96, 215, 101, 9, 121, 1, 242 },
                            Phone = "0971866177",
                            RefreshToken = "",
                            Role = "admin"
                        },
                        new
                        {
                            Id = 3,
                            FullName = "Tran Thien Hieu",
                            PasswordHash = new byte[] { 1, 209, 143, 58, 55, 27, 86, 235, 71, 145, 168, 213, 9, 203, 130, 189, 107, 105, 254, 34, 214, 88, 132, 81, 250, 84, 218, 149, 75, 228, 66, 44, 253, 175, 44, 143, 137, 209, 237, 54, 24, 9, 72, 23, 181, 109, 154, 113, 66, 210, 214, 101, 32, 146, 96, 181, 157, 52, 192, 114, 78, 203, 162, 22 },
                            PasswordSalt = new byte[] { 131, 136, 217, 21, 66, 89, 133, 12, 198, 224, 251, 104, 121, 196, 43, 128, 216, 238, 11, 10, 242, 204, 180, 7, 243, 219, 150, 46, 185, 95, 169, 99, 13, 164, 7, 213, 9, 157, 74, 147, 23, 139, 93, 3, 194, 119, 129, 27, 206, 87, 151, 97, 37, 252, 156, 36, 73, 92, 156, 213, 60, 124, 109, 105, 144, 18, 185, 90, 237, 168, 200, 239, 47, 194, 209, 129, 13, 106, 211, 228, 206, 30, 248, 69, 164, 75, 200, 181, 80, 98, 74, 144, 195, 142, 124, 68, 85, 223, 152, 1, 173, 206, 143, 153, 207, 122, 112, 162, 116, 206, 223, 184, 93, 15, 240, 72, 63, 104, 41, 158, 155, 96, 215, 101, 9, 121, 1, 242 },
                            Phone = "0123456789",
                            RefreshToken = "",
                            Role = "sale"
                        },
                        new
                        {
                            Id = 4,
                            FullName = "Tran Van Phat",
                            PasswordHash = new byte[] { 1, 209, 143, 58, 55, 27, 86, 235, 71, 145, 168, 213, 9, 203, 130, 189, 107, 105, 254, 34, 214, 88, 132, 81, 250, 84, 218, 149, 75, 228, 66, 44, 253, 175, 44, 143, 137, 209, 237, 54, 24, 9, 72, 23, 181, 109, 154, 113, 66, 210, 214, 101, 32, 146, 96, 181, 157, 52, 192, 114, 78, 203, 162, 22 },
                            PasswordSalt = new byte[] { 131, 136, 217, 21, 66, 89, 133, 12, 198, 224, 251, 104, 121, 196, 43, 128, 216, 238, 11, 10, 242, 204, 180, 7, 243, 219, 150, 46, 185, 95, 169, 99, 13, 164, 7, 213, 9, 157, 74, 147, 23, 139, 93, 3, 194, 119, 129, 27, 206, 87, 151, 97, 37, 252, 156, 36, 73, 92, 156, 213, 60, 124, 109, 105, 144, 18, 185, 90, 237, 168, 200, 239, 47, 194, 209, 129, 13, 106, 211, 228, 206, 30, 248, 69, 164, 75, 200, 181, 80, 98, 74, 144, 195, 142, 124, 68, 85, 223, 152, 1, 173, 206, 143, 153, 207, 122, 112, 162, 116, 206, 223, 184, 93, 15, 240, 72, 63, 104, 41, 158, 155, 96, 215, 101, 9, 121, 1, 242 },
                            Phone = "0987654321",
                            RefreshToken = "",
                            Role = "Technical"
                        },
                        new
                        {
                            Id = 5,
                            FullName = "Nguyen Van A",
                            PasswordHash = new byte[] { 1, 209, 143, 58, 55, 27, 86, 235, 71, 145, 168, 213, 9, 203, 130, 189, 107, 105, 254, 34, 214, 88, 132, 81, 250, 84, 218, 149, 75, 228, 66, 44, 253, 175, 44, 143, 137, 209, 237, 54, 24, 9, 72, 23, 181, 109, 154, 113, 66, 210, 214, 101, 32, 146, 96, 181, 157, 52, 192, 114, 78, 203, 162, 22 },
                            PasswordSalt = new byte[] { 131, 136, 217, 21, 66, 89, 133, 12, 198, 224, 251, 104, 121, 196, 43, 128, 216, 238, 11, 10, 242, 204, 180, 7, 243, 219, 150, 46, 185, 95, 169, 99, 13, 164, 7, 213, 9, 157, 74, 147, 23, 139, 93, 3, 194, 119, 129, 27, 206, 87, 151, 97, 37, 252, 156, 36, 73, 92, 156, 213, 60, 124, 109, 105, 144, 18, 185, 90, 237, 168, 200, 239, 47, 194, 209, 129, 13, 106, 211, 228, 206, 30, 248, 69, 164, 75, 200, 181, 80, 98, 74, 144, 195, 142, 124, 68, 85, 223, 152, 1, 173, 206, 143, 153, 207, 122, 112, 162, 116, 206, 223, 184, 93, 15, 240, 72, 63, 104, 41, 158, 155, 96, 215, 101, 9, 121, 1, 242 },
                            Phone = "0796526595",
                            RefreshToken = "",
                            Role = "sale"
                        },
                        new
                        {
                            Id = 6,
                            FullName = "Nguyen Van B",
                            PasswordHash = new byte[] { 1, 209, 143, 58, 55, 27, 86, 235, 71, 145, 168, 213, 9, 203, 130, 189, 107, 105, 254, 34, 214, 88, 132, 81, 250, 84, 218, 149, 75, 228, 66, 44, 253, 175, 44, 143, 137, 209, 237, 54, 24, 9, 72, 23, 181, 109, 154, 113, 66, 210, 214, 101, 32, 146, 96, 181, 157, 52, 192, 114, 78, 203, 162, 22 },
                            PasswordSalt = new byte[] { 131, 136, 217, 21, 66, 89, 133, 12, 198, 224, 251, 104, 121, 196, 43, 128, 216, 238, 11, 10, 242, 204, 180, 7, 243, 219, 150, 46, 185, 95, 169, 99, 13, 164, 7, 213, 9, 157, 74, 147, 23, 139, 93, 3, 194, 119, 129, 27, 206, 87, 151, 97, 37, 252, 156, 36, 73, 92, 156, 213, 60, 124, 109, 105, 144, 18, 185, 90, 237, 168, 200, 239, 47, 194, 209, 129, 13, 106, 211, 228, 206, 30, 248, 69, 164, 75, 200, 181, 80, 98, 74, 144, 195, 142, 124, 68, 85, 223, 152, 1, 173, 206, 143, 153, 207, 122, 112, 162, 116, 206, 223, 184, 93, 15, 240, 72, 63, 104, 41, 158, 155, 96, 215, 101, 9, 121, 1, 242 },
                            Phone = "0955797871",
                            RefreshToken = "",
                            Role = "sale"
                        },
                        new
                        {
                            Id = 7,
                            FullName = "Nguyen Van C",
                            PasswordHash = new byte[] { 1, 209, 143, 58, 55, 27, 86, 235, 71, 145, 168, 213, 9, 203, 130, 189, 107, 105, 254, 34, 214, 88, 132, 81, 250, 84, 218, 149, 75, 228, 66, 44, 253, 175, 44, 143, 137, 209, 237, 54, 24, 9, 72, 23, 181, 109, 154, 113, 66, 210, 214, 101, 32, 146, 96, 181, 157, 52, 192, 114, 78, 203, 162, 22 },
                            PasswordSalt = new byte[] { 131, 136, 217, 21, 66, 89, 133, 12, 198, 224, 251, 104, 121, 196, 43, 128, 216, 238, 11, 10, 242, 204, 180, 7, 243, 219, 150, 46, 185, 95, 169, 99, 13, 164, 7, 213, 9, 157, 74, 147, 23, 139, 93, 3, 194, 119, 129, 27, 206, 87, 151, 97, 37, 252, 156, 36, 73, 92, 156, 213, 60, 124, 109, 105, 144, 18, 185, 90, 237, 168, 200, 239, 47, 194, 209, 129, 13, 106, 211, 228, 206, 30, 248, 69, 164, 75, 200, 181, 80, 98, 74, 144, 195, 142, 124, 68, 85, 223, 152, 1, 173, 206, 143, 153, 207, 122, 112, 162, 116, 206, 223, 184, 93, 15, 240, 72, 63, 104, 41, 158, 155, 96, 215, 101, 9, 121, 1, 242 },
                            Phone = "0689764123",
                            RefreshToken = "",
                            Role = "sale"
                        },
                        new
                        {
                            Id = 8,
                            FullName = "Nguyen Van D",
                            PasswordHash = new byte[] { 1, 209, 143, 58, 55, 27, 86, 235, 71, 145, 168, 213, 9, 203, 130, 189, 107, 105, 254, 34, 214, 88, 132, 81, 250, 84, 218, 149, 75, 228, 66, 44, 253, 175, 44, 143, 137, 209, 237, 54, 24, 9, 72, 23, 181, 109, 154, 113, 66, 210, 214, 101, 32, 146, 96, 181, 157, 52, 192, 114, 78, 203, 162, 22 },
                            PasswordSalt = new byte[] { 131, 136, 217, 21, 66, 89, 133, 12, 198, 224, 251, 104, 121, 196, 43, 128, 216, 238, 11, 10, 242, 204, 180, 7, 243, 219, 150, 46, 185, 95, 169, 99, 13, 164, 7, 213, 9, 157, 74, 147, 23, 139, 93, 3, 194, 119, 129, 27, 206, 87, 151, 97, 37, 252, 156, 36, 73, 92, 156, 213, 60, 124, 109, 105, 144, 18, 185, 90, 237, 168, 200, 239, 47, 194, 209, 129, 13, 106, 211, 228, 206, 30, 248, 69, 164, 75, 200, 181, 80, 98, 74, 144, 195, 142, 124, 68, 85, 223, 152, 1, 173, 206, 143, 153, 207, 122, 112, 162, 116, 206, 223, 184, 93, 15, 240, 72, 63, 104, 41, 158, 155, 96, 215, 101, 9, 121, 1, 242 },
                            Phone = "0689434167",
                            RefreshToken = "",
                            Role = "Technical"
                        },
                        new
                        {
                            Id = 9,
                            FullName = "Nguyen Van E",
                            PasswordHash = new byte[] { 1, 209, 143, 58, 55, 27, 86, 235, 71, 145, 168, 213, 9, 203, 130, 189, 107, 105, 254, 34, 214, 88, 132, 81, 250, 84, 218, 149, 75, 228, 66, 44, 253, 175, 44, 143, 137, 209, 237, 54, 24, 9, 72, 23, 181, 109, 154, 113, 66, 210, 214, 101, 32, 146, 96, 181, 157, 52, 192, 114, 78, 203, 162, 22 },
                            PasswordSalt = new byte[] { 131, 136, 217, 21, 66, 89, 133, 12, 198, 224, 251, 104, 121, 196, 43, 128, 216, 238, 11, 10, 242, 204, 180, 7, 243, 219, 150, 46, 185, 95, 169, 99, 13, 164, 7, 213, 9, 157, 74, 147, 23, 139, 93, 3, 194, 119, 129, 27, 206, 87, 151, 97, 37, 252, 156, 36, 73, 92, 156, 213, 60, 124, 109, 105, 144, 18, 185, 90, 237, 168, 200, 239, 47, 194, 209, 129, 13, 106, 211, 228, 206, 30, 248, 69, 164, 75, 200, 181, 80, 98, 74, 144, 195, 142, 124, 68, 85, 223, 152, 1, 173, 206, 143, 153, 207, 122, 112, 162, 116, 206, 223, 184, 93, 15, 240, 72, 63, 104, 41, 158, 155, 96, 215, 101, 9, 121, 1, 242 },
                            Phone = "0689764139",
                            RefreshToken = "",
                            Role = "Technical"
                        },
                        new
                        {
                            Id = 10,
                            FullName = "Nguyen Van F",
                            PasswordHash = new byte[] { 1, 209, 143, 58, 55, 27, 86, 235, 71, 145, 168, 213, 9, 203, 130, 189, 107, 105, 254, 34, 214, 88, 132, 81, 250, 84, 218, 149, 75, 228, 66, 44, 253, 175, 44, 143, 137, 209, 237, 54, 24, 9, 72, 23, 181, 109, 154, 113, 66, 210, 214, 101, 32, 146, 96, 181, 157, 52, 192, 114, 78, 203, 162, 22 },
                            PasswordSalt = new byte[] { 131, 136, 217, 21, 66, 89, 133, 12, 198, 224, 251, 104, 121, 196, 43, 128, 216, 238, 11, 10, 242, 204, 180, 7, 243, 219, 150, 46, 185, 95, 169, 99, 13, 164, 7, 213, 9, 157, 74, 147, 23, 139, 93, 3, 194, 119, 129, 27, 206, 87, 151, 97, 37, 252, 156, 36, 73, 92, 156, 213, 60, 124, 109, 105, 144, 18, 185, 90, 237, 168, 200, 239, 47, 194, 209, 129, 13, 106, 211, 228, 206, 30, 248, 69, 164, 75, 200, 181, 80, 98, 74, 144, 195, 142, 124, 68, 85, 223, 152, 1, 173, 206, 143, 153, 207, 122, 112, 162, 116, 206, 223, 184, 93, 15, 240, 72, 63, 104, 41, 158, 155, 96, 215, 101, 9, 121, 1, 242 },
                            Phone = "0329764195",
                            RefreshToken = "",
                            Role = "Technical"
                        });
                });

            modelBuilder.Entity("Lib.Entities.Address_store", b =>
                {
                    b.HasOne("Lib.Entities.Addresses", "Addresses")
                        .WithOne("Address_Store")
                        .HasForeignKey("Lib.Entities.Address_store", "Address_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Address_store_Addresses");

                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Lib.Entities.Call_charges", b =>
                {
                    b.HasOne("Lib.Entities.Duration", "Duration")
                        .WithMany("Call_Charges")
                        .HasForeignKey("Duration_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Call_charges_Duration");

                    b.Navigation("Duration");
                });

            modelBuilder.Entity("Lib.Entities.Contract_Service", b =>
                {
                    b.HasOne("Lib.Entities.Order", "Order")
                        .WithOne("Contract_Service")
                        .HasForeignKey("Lib.Entities.Contract_Service", "Order_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Contract_Services_Order");

                    b.HasOne("Lib.Entities.TP_contract", "TP_Contract")
                        .WithMany("Contract_Services")
                        .HasForeignKey("TP_Contract_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Contract_Services_TpContractor");

                    b.Navigation("Order");

                    b.Navigation("TP_Contract");
                });

            modelBuilder.Entity("Lib.Entities.Duration", b =>
                {
                    b.HasOne("Lib.Entities.Package", "Package")
                        .WithMany("Durations")
                        .HasForeignKey("Package_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Duration_Package");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("Lib.Entities.Duration_callCharges", b =>
                {
                    b.HasOne("Lib.Entities.Call_charges", "Call_charges")
                        .WithMany("Duration_CallCharges")
                        .HasForeignKey("Call_charges_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Duration_callCharges_Call_charges");

                    b.HasOne("Lib.Entities.Duration", "Duration")
                        .WithMany("Duration_callChargeses")
                        .HasForeignKey("Duration_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Duration_callCharges_Duration");

                    b.Navigation("Call_charges");

                    b.Navigation("Duration");
                });

            modelBuilder.Entity("Lib.Entities.Employee", b =>
                {
                    b.HasOne("Lib.Entities.Address_store", "Address_store")
                        .WithMany("Employees")
                        .HasForeignKey("Address_store_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Emp_Address_store");

                    b.HasOne("Lib.Entities.Employee_type", "Employee_type")
                        .WithMany("Employees")
                        .HasForeignKey("Employee_type_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Emp_Emp_type");

                    b.Navigation("Address_store");

                    b.Navigation("Employee_type");
                });

            modelBuilder.Entity("Lib.Entities.Feedback", b =>
                {
                    b.HasOne("Lib.Entities.Duration", "Duration")
                        .WithMany("Feedbacks")
                        .HasForeignKey("Duration_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_FeedBack_Duration");

                    b.HasOne("Lib.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Feedback_User");

                    b.Navigation("Duration");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lib.Entities.ImportReceipt", b =>
                {
                    b.HasOne("Lib.Entities.Product", "Product")
                        .WithMany("ImportReceipt")
                        .HasForeignKey("Product_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Product_ImportReceipt");

                    b.HasOne("Lib.Entities.Storage", "Storage")
                        .WithMany("import_receipt")
                        .HasForeignKey("Storage_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_ImportReceipt_Storage");

                    b.Navigation("Product");

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("Lib.Entities.Order", b =>
                {
                    b.HasOne("Lib.Entities.Addresses", "Addresses")
                        .WithOne("Order")
                        .HasForeignKey("Lib.Entities.Order", "Addresses_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Order_Address_Id");

                    b.HasOne("Lib.Entities.Coupon", "Coupon")
                        .WithMany("Orders")
                        .HasForeignKey("Coupon_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Order_Coupon");

                    b.HasOne("Lib.Entities.Duration", "Duration")
                        .WithMany("Orders")
                        .HasForeignKey("Duration_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Order_Duration");

                    b.HasOne("Lib.Entities.Duration_callCharges", "Duration_callCharges")
                        .WithMany("Orders")
                        .HasForeignKey("Duration_callCharges_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Order_Duration_callCharges");

                    b.HasOne("Lib.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Order_User");

                    b.Navigation("Addresses");

                    b.Navigation("Coupon");

                    b.Navigation("Duration");

                    b.Navigation("Duration_callCharges");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lib.Entities.Order_handler", b =>
                {
                    b.HasOne("Lib.Entities.Address_store", "Address_store")
                        .WithMany("Order_handlers")
                        .HasForeignKey("Address_store_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Order_handle_Address_store");

                    b.HasOne("Lib.Entities.Employee", "Employee")
                        .WithMany("Order_handlers")
                        .HasForeignKey("Employee_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Order_handle_Employee");

                    b.HasOne("Lib.Entities.Order", "Order")
                        .WithMany("Order_handlers")
                        .HasForeignKey("Order_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Order_handle_Order");

                    b.Navigation("Address_store");

                    b.Navigation("Employee");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Lib.Entities.Package", b =>
                {
                    b.HasOne("Lib.Entities.Connect_type", "Connect_type")
                        .WithMany("Packages")
                        .HasForeignKey("Connect_type_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Packages_Connect_type");

                    b.Navigation("Connect_type");
                });

            modelBuilder.Entity("Lib.Entities.Payment", b =>
                {
                    b.HasOne("Lib.Entities.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("Order_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Payment_Order");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Lib.Entities.Product", b =>
                {
                    b.HasOne("Lib.Entities.Connect_type", "Connect_type")
                        .WithMany("Products")
                        .HasForeignKey("Connect_type_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Product_ConnectType");

                    b.HasOne("Lib.Entities.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("Supplier_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Product_Supplier");

                    b.Navigation("Connect_type");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Lib.Entities.Storage", b =>
                {
                    b.HasOne("Lib.Entities.Address_store", "Address_Store")
                        .WithOne("Storage")
                        .HasForeignKey("Lib.Entities.Storage", "Address_store_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Storage_Address_store");

                    b.Navigation("Address_Store");
                });

            modelBuilder.Entity("Lib.Entities.User", b =>
                {
                    b.HasOne("Lib.Entities.Employee", "Employees")
                        .WithOne("User")
                        .HasForeignKey("Lib.Entities.User", "Employees_Id")
                        .HasConstraintName("FK_User_Employee");

                    b.HasOne("Lib.Entities.TP_contract", "TP_contract")
                        .WithOne("User")
                        .HasForeignKey("Lib.Entities.User", "TP_contract_Id")
                        .HasConstraintName("FK_User_TpContractor");

                    b.Navigation("Employees");

                    b.Navigation("TP_contract");
                });

            modelBuilder.Entity("Lib.Entities.Address_store", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Order_handlers");

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("Lib.Entities.Addresses", b =>
                {
                    b.Navigation("Address_Store");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Lib.Entities.Call_charges", b =>
                {
                    b.Navigation("Duration_CallCharges");
                });

            modelBuilder.Entity("Lib.Entities.Connect_type", b =>
                {
                    b.Navigation("Packages");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Lib.Entities.Coupon", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Lib.Entities.Duration", b =>
                {
                    b.Navigation("Call_Charges");

                    b.Navigation("Duration_callChargeses");

                    b.Navigation("Feedbacks");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Lib.Entities.Duration_callCharges", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Lib.Entities.Employee", b =>
                {
                    b.Navigation("Order_handlers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lib.Entities.Employee_type", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Lib.Entities.Order", b =>
                {
                    b.Navigation("Contract_Service");

                    b.Navigation("Order_handlers");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Lib.Entities.Package", b =>
                {
                    b.Navigation("Durations");
                });

            modelBuilder.Entity("Lib.Entities.Product", b =>
                {
                    b.Navigation("ImportReceipt");
                });

            modelBuilder.Entity("Lib.Entities.Storage", b =>
                {
                    b.Navigation("import_receipt");
                });

            modelBuilder.Entity("Lib.Entities.Supplier", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Lib.Entities.TP_contract", b =>
                {
                    b.Navigation("Contract_Services");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lib.Entities.User", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
