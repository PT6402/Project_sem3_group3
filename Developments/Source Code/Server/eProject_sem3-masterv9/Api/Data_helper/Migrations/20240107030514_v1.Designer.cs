// <auto-generated />
using System;
using Api.Data_helper;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Api.Data_helper.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240107030514_v1")]
    partial class v1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Lib.Entities.Address_store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Address_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Address_Id")
                        .IsUnique();

                    b.ToTable("tbAddress_store");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address_Id = 1
                        },
                        new
                        {
                            Id = 2,
                            Address_Id = 2
                        },
                        new
                        {
                            Id = 3,
                            Address_Id = 3
                        },
                        new
                        {
                            Id = 4,
                            Address_Id = 4
                        });
                });

            modelBuilder.Entity("Lib.Entities.Addresses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address_full")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ward_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbAddress");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address_full = "tuyen quang, ha hang, thuong giap",
                            District_code = "72",
                            Phone_code = "207",
                            Province_code = "8",
                            Ward_code = "2230"
                        },
                        new
                        {
                            Id = 2,
                            Address_full = "quang ninh , huyen binh lieu, dong van",
                            District_code = "198",
                            Phone_code = "203",
                            Province_code = "22",
                            Ward_code = "6847"
                        },
                        new
                        {
                            Id = 3,
                            Address_full = "soc trang, long phu, phu huu",
                            District_code = "946",
                            Phone_code = "299",
                            Province_code = "94",
                            Ward_code = "31657"
                        },
                        new
                        {
                            Id = 4,
                            Address_full = "cao bang , bao lac , thuong ha",
                            District_code = "43",
                            Phone_code = "206",
                            Province_code = "4",
                            Ward_code = "1327"
                        });
                });

            modelBuilder.Entity("Lib.Entities.Banner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Banner");
                });

            modelBuilder.Entity("Lib.Entities.Call_charges", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Duration_Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Duration_Id");

                    b.ToTable("tbCall_charges");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Duration_Id = 14,
                            Name = "Local ULT",
                            Price = 55f,
                            Unit = "cent/min"
                        },
                        new
                        {
                            Id = 2,
                            Duration_Id = 15,
                            Name = "Local M",
                            Price = 75f,
                            Unit = "cent/min"
                        },
                        new
                        {
                            Id = 3,
                            Duration_Id = 16,
                            Name = "Local",
                            Price = 70f,
                            Unit = "cent/min"
                        },
                        new
                        {
                            Id = 4,
                            Duration_Id = 16,
                            Name = "STD",
                            Price = 2.25f,
                            Unit = "$/min"
                        },
                        new
                        {
                            Id = 5,
                            Duration_Id = 16,
                            Name = "Messaging for mobiles",
                            Price = 1f,
                            Unit = "$/min"
                        },
                        new
                        {
                            Id = 6,
                            Duration_Id = 17,
                            Name = "Local",
                            Price = 60f,
                            Unit = "cent/min"
                        },
                        new
                        {
                            Id = 7,
                            Duration_Id = 17,
                            Name = "STD",
                            Price = 2f,
                            Unit = "$/min"
                        },
                        new
                        {
                            Id = 8,
                            Duration_Id = 17,
                            Name = "Messaging for mobiles",
                            Price = 1.15f,
                            Unit = "$/min"
                        },
                        new
                        {
                            Id = 9,
                            Duration_Id = 18,
                            Name = "Local",
                            Price = 60f,
                            Unit = "cent/min"
                        },
                        new
                        {
                            Id = 10,
                            Duration_Id = 18,
                            Name = "STD",
                            Price = 1.75f,
                            Unit = "$/min"
                        },
                        new
                        {
                            Id = 11,
                            Duration_Id = 18,
                            Name = "Messaging for mobiles",
                            Price = 1.12f,
                            Unit = "$/min"
                        });
                });

            modelBuilder.Entity("Lib.Entities.Connect_type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("First_Letter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Security_Deposit")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("tbConnect_type");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "dial-up",
                            First_Letter = "D",
                            Name = "Dial-up",
                            Security_Deposit = 325f
                        },
                        new
                        {
                            Id = 2,
                            Description = "Broad Band",
                            First_Letter = "B",
                            Name = "Broad Band",
                            Security_Deposit = 500f
                        },
                        new
                        {
                            Id = 3,
                            Description = "LandLine",
                            First_Letter = "L",
                            Name = "LandLine",
                            Security_Deposit = 250f
                        });
                });

            modelBuilder.Entity("Lib.Entities.Contract_Service", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContractCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Order_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TP_Contract_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Order_Id")
                        .IsUnique();

                    b.HasIndex("TP_Contract_Id");

                    b.ToTable("tbContract_Service");
                });

            modelBuilder.Entity("Lib.Entities.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("From")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Percent_discount")
                        .HasColumnType("real");

                    b.Property<int>("To")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("tbCoupon");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            From = 15,
                            Name = "code coupon",
                            Percent_discount = 25f,
                            To = 10
                        },
                        new
                        {
                            Id = 2,
                            From = 25,
                            Name = "code coupon 1",
                            Percent_discount = 50f,
                            To = 15
                        },
                        new
                        {
                            Id = 3,
                            From = 50,
                            Name = "code coupon 2",
                            Percent_discount = 75f,
                            To = 25
                        },
                        new
                        {
                            Id = 4,
                            From = 1000,
                            Name = "code coupon 3",
                            Percent_discount = 100f,
                            To = 50
                        });
                });

            modelBuilder.Entity("Lib.Entities.Duration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Package_Id")
                        .HasColumnType("int");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("Time")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Validate")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Package_Id");

                    b.ToTable("tbDuration");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Package_Id = 1,
                            Price = 50f,
                            Time = "10Hrs",
                            Validate = "1"
                        },
                        new
                        {
                            Id = 2,
                            Package_Id = 1,
                            Price = 130f,
                            Time = "30Hrs",
                            Validate = "3"
                        },
                        new
                        {
                            Id = 3,
                            Package_Id = 1,
                            Price = 260f,
                            Time = "60Hrs",
                            Validate = "6"
                        },
                        new
                        {
                            Id = 4,
                            Package_Id = 2,
                            Price = 75f,
                            Time = "Monthly",
                            Validate = "1"
                        },
                        new
                        {
                            Id = 5,
                            Package_Id = 2,
                            Price = 150f,
                            Time = "Quarterly",
                            Validate = "3"
                        },
                        new
                        {
                            Id = 6,
                            Package_Id = 3,
                            Price = 100f,
                            Time = "Monthly",
                            Validate = "1"
                        },
                        new
                        {
                            Id = 7,
                            Package_Id = 3,
                            Price = 180f,
                            Time = "Quarterly",
                            Validate = "3"
                        },
                        new
                        {
                            Id = 8,
                            Package_Id = 4,
                            Price = 175f,
                            Time = "30Hrs",
                            Validate = "1"
                        },
                        new
                        {
                            Id = 9,
                            Package_Id = 4,
                            Price = 315f,
                            Time = "60Hrs",
                            Validate = "3"
                        },
                        new
                        {
                            Id = 10,
                            Package_Id = 5,
                            Price = 225f,
                            Time = "Monthly",
                            Validate = "1"
                        },
                        new
                        {
                            Id = 11,
                            Package_Id = 5,
                            Price = 400f,
                            Time = "Quarterly",
                            Validate = "3"
                        },
                        new
                        {
                            Id = 12,
                            Package_Id = 6,
                            Price = 350f,
                            Time = "Monthly",
                            Validate = "1"
                        },
                        new
                        {
                            Id = 13,
                            Package_Id = 6,
                            Price = 445f,
                            Time = "Quarterly",
                            Validate = "3"
                        },
                        new
                        {
                            Id = 14,
                            Description = "Local ULT : 55 cent/min",
                            Package_Id = 7,
                            Price = 75f,
                            Time = "Unlimited",
                            Validate = "12"
                        },
                        new
                        {
                            Id = 15,
                            Description = "Local M: 75cent/min",
                            Package_Id = 7,
                            Price = 35f,
                            Time = "Monthly",
                            Validate = "1"
                        },
                        new
                        {
                            Id = 16,
                            Description = "Local: 70cent/min; STD:2.25$/min ; Messaging for mobiles:1$/min",
                            Package_Id = 8,
                            Price = 125f,
                            Time = "Monthly",
                            Validate = "1"
                        },
                        new
                        {
                            Id = 17,
                            Description = "Local: 60cent/min; STD:2$/min ; Messaging for mobiles:1.15$/min",
                            Package_Id = 8,
                            Price = 420f,
                            Time = "Half-Yearly",
                            Validate = "6"
                        },
                        new
                        {
                            Id = 18,
                            Description = "Local: 60cent/min; STD:1.75$/min ; Messaging for mobiles:1.12$/min",
                            Package_Id = 8,
                            Price = 799f,
                            Time = "Yearly",
                            Validate = "12"
                        });
                });

            modelBuilder.Entity("Lib.Entities.Duration_callCharges", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Call_charges_Id")
                        .HasColumnType("int");

                    b.Property<int>("Duration_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Call_charges_Id");

                    b.HasIndex("Duration_Id");

                    b.ToTable("tbDuration_callCharges");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Duration_Id = 1
                        },
                        new
                        {
                            Id = 2,
                            Duration_Id = 2
                        },
                        new
                        {
                            Id = 3,
                            Duration_Id = 3
                        },
                        new
                        {
                            Id = 4,
                            Duration_Id = 4
                        },
                        new
                        {
                            Id = 5,
                            Duration_Id = 5
                        },
                        new
                        {
                            Id = 6,
                            Duration_Id = 6
                        },
                        new
                        {
                            Id = 7,
                            Duration_Id = 7
                        },
                        new
                        {
                            Id = 8,
                            Duration_Id = 8
                        },
                        new
                        {
                            Id = 9,
                            Duration_Id = 9
                        },
                        new
                        {
                            Id = 10,
                            Duration_Id = 10
                        },
                        new
                        {
                            Id = 11,
                            Duration_Id = 11
                        },
                        new
                        {
                            Id = 12,
                            Duration_Id = 12
                        },
                        new
                        {
                            Id = 13,
                            Duration_Id = 13
                        },
                        new
                        {
                            Id = 14,
                            Call_charges_Id = 1,
                            Duration_Id = 14
                        },
                        new
                        {
                            Id = 15,
                            Call_charges_Id = 2,
                            Duration_Id = 15
                        },
                        new
                        {
                            Id = 16,
                            Call_charges_Id = 3,
                            Duration_Id = 16
                        },
                        new
                        {
                            Id = 17,
                            Call_charges_Id = 4,
                            Duration_Id = 16
                        },
                        new
                        {
                            Id = 18,
                            Call_charges_Id = 5,
                            Duration_Id = 16
                        },
                        new
                        {
                            Id = 19,
                            Call_charges_Id = 6,
                            Duration_Id = 17
                        },
                        new
                        {
                            Id = 20,
                            Call_charges_Id = 7,
                            Duration_Id = 17
                        },
                        new
                        {
                            Id = 21,
                            Call_charges_Id = 8,
                            Duration_Id = 17
                        },
                        new
                        {
                            Id = 22,
                            Call_charges_Id = 9,
                            Duration_Id = 18
                        },
                        new
                        {
                            Id = 23,
                            Call_charges_Id = 10,
                            Duration_Id = 18
                        },
                        new
                        {
                            Id = 24,
                            Call_charges_Id = 11,
                            Duration_Id = 18
                        });
                });

            modelBuilder.Entity("Lib.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Address_store_Id")
                        .HasColumnType("int");

                    b.Property<int>("Employee_type_Id")
                        .HasColumnType("int");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Address_store_Id");

                    b.HasIndex("Employee_type_Id");

                    b.ToTable("tbEmployee");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address_store_Id = 1,
                            Employee_type_Id = 1,
                            User_Id = 3
                        },
                        new
                        {
                            Id = 2,
                            Address_store_Id = 1,
                            Employee_type_Id = 2,
                            User_Id = 4
                        },
                        new
                        {
                            Id = 5,
                            Address_store_Id = 2,
                            Employee_type_Id = 1,
                            User_Id = 7
                        },
                        new
                        {
                            Id = 4,
                            Address_store_Id = 2,
                            Employee_type_Id = 2,
                            User_Id = 6
                        });
                });

            modelBuilder.Entity("Lib.Entities.Employee_type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbEmployee_type");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sale"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Technician"
                        });
                });

            modelBuilder.Entity("Lib.Entities.ImportReceipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Product_Id")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Storage_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Product_Id");

                    b.HasIndex("Storage_id");

                    b.ToTable("tbImportReceipt");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Product_Id = 1,
                            Quantity = 10,
                            Status = "Done",
                            Storage_id = 1,
                            Time = new DateTime(2024, 1, 7, 10, 5, 13, 859, DateTimeKind.Local).AddTicks(3530)
                        },
                        new
                        {
                            Id = 2,
                            Product_Id = 2,
                            Quantity = 15,
                            Status = "Done",
                            Storage_id = 1,
                            Time = new DateTime(2024, 1, 7, 10, 5, 13, 859, DateTimeKind.Local).AddTicks(3560)
                        },
                        new
                        {
                            Id = 3,
                            Product_Id = 3,
                            Quantity = 20,
                            Status = "Done",
                            Storage_id = 1,
                            Time = new DateTime(2024, 1, 7, 10, 5, 13, 859, DateTimeKind.Local).AddTicks(3560)
                        },
                        new
                        {
                            Id = 4,
                            Product_Id = 4,
                            Quantity = 30,
                            Status = "Done",
                            Storage_id = 1,
                            Time = new DateTime(2024, 1, 7, 10, 5, 13, 859, DateTimeKind.Local).AddTicks(3570)
                        },
                        new
                        {
                            Id = 5,
                            Product_Id = 5,
                            Quantity = 10,
                            Status = "Done",
                            Storage_id = 1,
                            Time = new DateTime(2024, 1, 7, 10, 5, 13, 859, DateTimeKind.Local).AddTicks(3570)
                        },
                        new
                        {
                            Id = 6,
                            Product_Id = 6,
                            Quantity = 15,
                            Status = "Done",
                            Storage_id = 1,
                            Time = new DateTime(2024, 1, 7, 10, 5, 13, 859, DateTimeKind.Local).AddTicks(3570)
                        },
                        new
                        {
                            Id = 7,
                            Product_Id = 7,
                            Quantity = 20,
                            Status = "Done",
                            Storage_id = 1,
                            Time = new DateTime(2024, 1, 7, 10, 5, 13, 859, DateTimeKind.Local).AddTicks(3570)
                        },
                        new
                        {
                            Id = 8,
                            Product_Id = 8,
                            Quantity = 30,
                            Status = "Done",
                            Storage_id = 1,
                            Time = new DateTime(2024, 1, 7, 10, 5, 13, 859, DateTimeKind.Local).AddTicks(3570)
                        },
                        new
                        {
                            Id = 9,
                            Product_Id = 9,
                            Quantity = 10,
                            Status = "Done",
                            Storage_id = 1,
                            Time = new DateTime(2024, 1, 7, 10, 5, 13, 859, DateTimeKind.Local).AddTicks(3580)
                        },
                        new
                        {
                            Id = 10,
                            Product_Id = 10,
                            Quantity = 15,
                            Status = "Done",
                            Storage_id = 1,
                            Time = new DateTime(2024, 1, 7, 10, 5, 13, 859, DateTimeKind.Local).AddTicks(3580)
                        },
                        new
                        {
                            Id = 11,
                            Product_Id = 11,
                            Quantity = 20,
                            Status = "Done",
                            Storage_id = 1,
                            Time = new DateTime(2024, 1, 7, 10, 5, 13, 859, DateTimeKind.Local).AddTicks(3580)
                        },
                        new
                        {
                            Id = 12,
                            Product_Id = 12,
                            Quantity = 30,
                            Status = "Done",
                            Storage_id = 1,
                            Time = new DateTime(2024, 1, 7, 10, 5, 13, 859, DateTimeKind.Local).AddTicks(3580)
                        },
                        new
                        {
                            Id = 13,
                            Product_Id = 13,
                            Quantity = 10,
                            Status = "Done",
                            Storage_id = 1,
                            Time = new DateTime(2024, 1, 7, 10, 5, 13, 859, DateTimeKind.Local).AddTicks(3580)
                        },
                        new
                        {
                            Id = 14,
                            Product_Id = 14,
                            Quantity = 15,
                            Status = "Done",
                            Storage_id = 1,
                            Time = new DateTime(2024, 1, 7, 10, 5, 13, 859, DateTimeKind.Local).AddTicks(3590)
                        },
                        new
                        {
                            Id = 15,
                            Product_Id = 15,
                            Quantity = 20,
                            Status = "Done",
                            Storage_id = 1,
                            Time = new DateTime(2024, 1, 7, 10, 5, 13, 859, DateTimeKind.Local).AddTicks(3590)
                        },
                        new
                        {
                            Id = 16,
                            Product_Id = 16,
                            Quantity = 30,
                            Status = "Done",
                            Storage_id = 1,
                            Time = new DateTime(2024, 1, 7, 10, 5, 13, 859, DateTimeKind.Local).AddTicks(3590)
                        },
                        new
                        {
                            Id = 17,
                            Product_Id = 17,
                            Quantity = 15,
                            Status = "Done",
                            Storage_id = 1,
                            Time = new DateTime(2024, 1, 7, 10, 5, 13, 859, DateTimeKind.Local).AddTicks(3590)
                        },
                        new
                        {
                            Id = 18,
                            Product_Id = 18,
                            Quantity = 20,
                            Status = "Done",
                            Storage_id = 1,
                            Time = new DateTime(2024, 1, 7, 10, 5, 13, 859, DateTimeKind.Local).AddTicks(3590)
                        });
                });

            modelBuilder.Entity("Lib.Entities.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Addresses_Id")
                        .HasColumnType("int");

                    b.Property<string>("ContractService_Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Coupon_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Duration_Id")
                        .HasColumnType("int");

                    b.Property<int?>("Duration_callCharges_Id")
                        .HasColumnType("int");

                    b.Property<int>("Numb_Connect")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tax")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Total_Price")
                        .HasColumnType("real");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Addresses_Id")
                        .IsUnique();

                    b.HasIndex("Coupon_Id");

                    b.HasIndex("Duration_Id");

                    b.HasIndex("Duration_callCharges_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("tbOrders");
                });

            modelBuilder.Entity("Lib.Entities.Order_handler", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Address_store_Id")
                        .HasColumnType("int");

                    b.Property<int>("Employee_Id")
                        .HasColumnType("int");

                    b.Property<string>("Order_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("StatusHandle")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Address_store_Id");

                    b.HasIndex("Employee_Id");

                    b.HasIndex("Order_Id");

                    b.ToTable("Order_handler");
                });

            modelBuilder.Entity("Lib.Entities.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Connect_type_Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Connect_type_Id");

                    b.ToTable("tbPackage");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Connect_type_Id = 1,
                            Name = "Hourly Basic"
                        },
                        new
                        {
                            Id = 2,
                            Connect_type_Id = 1,
                            Name = "Unlimited 28Kbps"
                        },
                        new
                        {
                            Id = 3,
                            Connect_type_Id = 1,
                            Name = "Unlimited 56Kbps"
                        },
                        new
                        {
                            Id = 4,
                            Connect_type_Id = 2,
                            Name = "Hourly Basic"
                        },
                        new
                        {
                            Id = 5,
                            Connect_type_Id = 2,
                            Name = "Unlimited 64Kbps"
                        },
                        new
                        {
                            Id = 6,
                            Connect_type_Id = 2,
                            Name = "Unlimited 128Kbps"
                        },
                        new
                        {
                            Id = 7,
                            Connect_type_Id = 3,
                            Name = "Local Plan= Rental + Callcharges"
                        },
                        new
                        {
                            Id = 8,
                            Connect_type_Id = 3,
                            Name = "STD Plan"
                        });
                });

            modelBuilder.Entity("Lib.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Method_Payment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Order_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Order_Id");

                    b.ToTable("tbPayment");
                });

            modelBuilder.Entity("Lib.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Connect_type_Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Numb_Connect")
                        .HasColumnType("int");

                    b.Property<int>("Supplier_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Connect_type_Id");

                    b.HasIndex("Supplier_Id");

                    b.ToTable("tbProduct");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Connect_type_Id = 1,
                            Name = "UniFi AC Lite",
                            Numb_Connect = 10,
                            Supplier_Id = 1
                        },
                        new
                        {
                            Id = 2,
                            Connect_type_Id = 1,
                            Name = "UniFi AC Pro",
                            Numb_Connect = 15,
                            Supplier_Id = 1
                        },
                        new
                        {
                            Id = 3,
                            Connect_type_Id = 1,
                            Name = "UniFi AC Nano",
                            Numb_Connect = 25,
                            Supplier_Id = 1
                        },
                        new
                        {
                            Id = 4,
                            Connect_type_Id = 1,
                            Name = "UniFi AC NanoPro",
                            Numb_Connect = 51,
                            Supplier_Id = 1
                        },
                        new
                        {
                            Id = 5,
                            Connect_type_Id = 1,
                            Name = "GrandStream AC Lite",
                            Numb_Connect = 10,
                            Supplier_Id = 2
                        },
                        new
                        {
                            Id = 6,
                            Connect_type_Id = 1,
                            Name = "GrandStream AC Pro",
                            Numb_Connect = 15,
                            Supplier_Id = 2
                        },
                        new
                        {
                            Id = 7,
                            Connect_type_Id = 1,
                            Name = "GrandStream AC Nano",
                            Numb_Connect = 25,
                            Supplier_Id = 2
                        },
                        new
                        {
                            Id = 8,
                            Connect_type_Id = 1,
                            Name = "GrandStream AC NanoPro",
                            Numb_Connect = 51,
                            Supplier_Id = 2
                        },
                        new
                        {
                            Id = 9,
                            Connect_type_Id = 2,
                            Name = "UniFi AC Lite Max",
                            Numb_Connect = 10,
                            Supplier_Id = 1
                        },
                        new
                        {
                            Id = 10,
                            Connect_type_Id = 2,
                            Name = "UniFi AC Pro Max",
                            Numb_Connect = 15,
                            Supplier_Id = 1
                        },
                        new
                        {
                            Id = 11,
                            Connect_type_Id = 2,
                            Name = "UniFi AC Nano Max",
                            Numb_Connect = 25,
                            Supplier_Id = 1
                        },
                        new
                        {
                            Id = 12,
                            Connect_type_Id = 2,
                            Name = "UniFi AC NanoPro Max",
                            Numb_Connect = 51,
                            Supplier_Id = 1
                        },
                        new
                        {
                            Id = 13,
                            Connect_type_Id = 2,
                            Name = "GrandStream AC Lite Max",
                            Numb_Connect = 10,
                            Supplier_Id = 2
                        },
                        new
                        {
                            Id = 14,
                            Connect_type_Id = 2,
                            Name = "GrandStream AC Pro Max",
                            Numb_Connect = 15,
                            Supplier_Id = 2
                        },
                        new
                        {
                            Id = 15,
                            Connect_type_Id = 2,
                            Name = "GrandStream AC Nano Max",
                            Numb_Connect = 25,
                            Supplier_Id = 2
                        },
                        new
                        {
                            Id = 16,
                            Connect_type_Id = 2,
                            Name = "GrandStream AC NanoPro Max",
                            Numb_Connect = 51,
                            Supplier_Id = 2
                        },
                        new
                        {
                            Id = 17,
                            Connect_type_Id = 3,
                            Name = "KXTS500",
                            Numb_Connect = 10,
                            Supplier_Id = 3
                        },
                        new
                        {
                            Id = 18,
                            Connect_type_Id = 3,
                            Name = "IP Fanvil X7A",
                            Numb_Connect = 15,
                            Supplier_Id = 3
                        });
                });

            modelBuilder.Entity("Lib.Entities.Storage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Address_store_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Address_store_id")
                        .IsUnique();

                    b.ToTable("tbStorage");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address_store_id = 1
                        },
                        new
                        {
                            Id = 2,
                            Address_store_id = 2
                        },
                        new
                        {
                            Id = 3,
                            Address_store_id = 3
                        },
                        new
                        {
                            Id = 4,
                            Address_store_id = 4
                        });
                });

            modelBuilder.Entity("Lib.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("brandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbSupplier");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "ha noi",
                            Phone = "0462146762",
                            brandName = "UniFi"
                        },
                        new
                        {
                            Id = 2,
                            Address = "ha noi",
                            Phone = "0646272131",
                            brandName = "Grandstream"
                        },
                        new
                        {
                            Id = 3,
                            Address = "ha noi",
                            Phone = "0646272131",
                            brandName = "Panasonic"
                        });
                });

            modelBuilder.Entity("Lib.Entities.TP_contract", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("tbTP_contract");
                });

            modelBuilder.Entity("Lib.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Employees_Id")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MethodReset")
                        .HasColumnType("int");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PasswordReset")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TP_contract_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("TokenCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TokenExpires")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Employees_Id")
                        .IsUnique()
                        .HasFilter("[Employees_Id] IS NOT NULL");

                    b.HasIndex("TP_contract_Id")
                        .IsUnique()
                        .HasFilter("[TP_contract_Id] IS NOT NULL");

                    b.ToTable("tbUser");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FullName = "Nguyen Van Thien",
                            PasswordHash = new byte[] { 5, 48, 29, 215, 135, 173, 49, 210, 184, 34, 9, 116, 156, 20, 141, 248, 51, 20, 34, 249, 77, 90, 45, 204, 58, 50, 181, 75, 36, 7, 39, 80, 210, 155, 46, 215, 98, 161, 208, 75, 78, 68, 163, 52, 182, 209, 66, 25, 242, 213, 110, 50, 67, 8, 68, 230, 44, 2, 143, 240, 95, 169, 36, 45 },
                            PasswordSalt = new byte[] { 208, 103, 149, 135, 5, 157, 244, 243, 84, 188, 102, 248, 118, 187, 139, 91, 200, 12, 114, 110, 88, 92, 35, 157, 163, 142, 182, 76, 43, 65, 255, 48, 117, 21, 43, 26, 6, 89, 112, 253, 51, 112, 99, 44, 10, 235, 126, 157, 28, 222, 205, 219, 30, 229, 49, 91, 31, 36, 27, 33, 235, 33, 196, 7, 238, 163, 207, 189, 81, 16, 150, 216, 206, 73, 73, 0, 5, 175, 193, 47, 60, 49, 125, 98, 132, 7, 116, 28, 43, 25, 91, 14, 143, 89, 14, 78, 81, 63, 103, 37, 212, 0, 117, 31, 95, 66, 47, 79, 157, 141, 149, 112, 161, 38, 159, 104, 175, 65, 163, 75, 7, 166, 184, 203, 152, 30, 222, 74 },
                            Phone = "0932859395",
                            RefreshToken = "",
                            Role = "user"
                        },
                        new
                        {
                            Id = 2,
                            FullName = "admin",
                            PasswordHash = new byte[] { 5, 48, 29, 215, 135, 173, 49, 210, 184, 34, 9, 116, 156, 20, 141, 248, 51, 20, 34, 249, 77, 90, 45, 204, 58, 50, 181, 75, 36, 7, 39, 80, 210, 155, 46, 215, 98, 161, 208, 75, 78, 68, 163, 52, 182, 209, 66, 25, 242, 213, 110, 50, 67, 8, 68, 230, 44, 2, 143, 240, 95, 169, 36, 45 },
                            PasswordSalt = new byte[] { 208, 103, 149, 135, 5, 157, 244, 243, 84, 188, 102, 248, 118, 187, 139, 91, 200, 12, 114, 110, 88, 92, 35, 157, 163, 142, 182, 76, 43, 65, 255, 48, 117, 21, 43, 26, 6, 89, 112, 253, 51, 112, 99, 44, 10, 235, 126, 157, 28, 222, 205, 219, 30, 229, 49, 91, 31, 36, 27, 33, 235, 33, 196, 7, 238, 163, 207, 189, 81, 16, 150, 216, 206, 73, 73, 0, 5, 175, 193, 47, 60, 49, 125, 98, 132, 7, 116, 28, 43, 25, 91, 14, 143, 89, 14, 78, 81, 63, 103, 37, 212, 0, 117, 31, 95, 66, 47, 79, 157, 141, 149, 112, 161, 38, 159, 104, 175, 65, 163, 75, 7, 166, 184, 203, 152, 30, 222, 74 },
                            Phone = "0971866177",
                            RefreshToken = "",
                            Role = "admin"
                        },
                        new
                        {
                            Id = 3,
                            FullName = "Tran Thien Hieu",
                            PasswordHash = new byte[] { 5, 48, 29, 215, 135, 173, 49, 210, 184, 34, 9, 116, 156, 20, 141, 248, 51, 20, 34, 249, 77, 90, 45, 204, 58, 50, 181, 75, 36, 7, 39, 80, 210, 155, 46, 215, 98, 161, 208, 75, 78, 68, 163, 52, 182, 209, 66, 25, 242, 213, 110, 50, 67, 8, 68, 230, 44, 2, 143, 240, 95, 169, 36, 45 },
                            PasswordSalt = new byte[] { 208, 103, 149, 135, 5, 157, 244, 243, 84, 188, 102, 248, 118, 187, 139, 91, 200, 12, 114, 110, 88, 92, 35, 157, 163, 142, 182, 76, 43, 65, 255, 48, 117, 21, 43, 26, 6, 89, 112, 253, 51, 112, 99, 44, 10, 235, 126, 157, 28, 222, 205, 219, 30, 229, 49, 91, 31, 36, 27, 33, 235, 33, 196, 7, 238, 163, 207, 189, 81, 16, 150, 216, 206, 73, 73, 0, 5, 175, 193, 47, 60, 49, 125, 98, 132, 7, 116, 28, 43, 25, 91, 14, 143, 89, 14, 78, 81, 63, 103, 37, 212, 0, 117, 31, 95, 66, 47, 79, 157, 141, 149, 112, 161, 38, 159, 104, 175, 65, 163, 75, 7, 166, 184, 203, 152, 30, 222, 74 },
                            Phone = "0123456789",
                            RefreshToken = "",
                            Role = "sale"
                        },
                        new
                        {
                            Id = 4,
                            FullName = "Tran Van Phat",
                            PasswordHash = new byte[] { 5, 48, 29, 215, 135, 173, 49, 210, 184, 34, 9, 116, 156, 20, 141, 248, 51, 20, 34, 249, 77, 90, 45, 204, 58, 50, 181, 75, 36, 7, 39, 80, 210, 155, 46, 215, 98, 161, 208, 75, 78, 68, 163, 52, 182, 209, 66, 25, 242, 213, 110, 50, 67, 8, 68, 230, 44, 2, 143, 240, 95, 169, 36, 45 },
                            PasswordSalt = new byte[] { 208, 103, 149, 135, 5, 157, 244, 243, 84, 188, 102, 248, 118, 187, 139, 91, 200, 12, 114, 110, 88, 92, 35, 157, 163, 142, 182, 76, 43, 65, 255, 48, 117, 21, 43, 26, 6, 89, 112, 253, 51, 112, 99, 44, 10, 235, 126, 157, 28, 222, 205, 219, 30, 229, 49, 91, 31, 36, 27, 33, 235, 33, 196, 7, 238, 163, 207, 189, 81, 16, 150, 216, 206, 73, 73, 0, 5, 175, 193, 47, 60, 49, 125, 98, 132, 7, 116, 28, 43, 25, 91, 14, 143, 89, 14, 78, 81, 63, 103, 37, 212, 0, 117, 31, 95, 66, 47, 79, 157, 141, 149, 112, 161, 38, 159, 104, 175, 65, 163, 75, 7, 166, 184, 203, 152, 30, 222, 74 },
                            Phone = "0987654321",
                            RefreshToken = "",
                            Role = "Technical"
                        },
                        new
                        {
                            Id = 5,
                            FullName = "Nguyen Van A",
                            PasswordHash = new byte[] { 5, 48, 29, 215, 135, 173, 49, 210, 184, 34, 9, 116, 156, 20, 141, 248, 51, 20, 34, 249, 77, 90, 45, 204, 58, 50, 181, 75, 36, 7, 39, 80, 210, 155, 46, 215, 98, 161, 208, 75, 78, 68, 163, 52, 182, 209, 66, 25, 242, 213, 110, 50, 67, 8, 68, 230, 44, 2, 143, 240, 95, 169, 36, 45 },
                            PasswordSalt = new byte[] { 208, 103, 149, 135, 5, 157, 244, 243, 84, 188, 102, 248, 118, 187, 139, 91, 200, 12, 114, 110, 88, 92, 35, 157, 163, 142, 182, 76, 43, 65, 255, 48, 117, 21, 43, 26, 6, 89, 112, 253, 51, 112, 99, 44, 10, 235, 126, 157, 28, 222, 205, 219, 30, 229, 49, 91, 31, 36, 27, 33, 235, 33, 196, 7, 238, 163, 207, 189, 81, 16, 150, 216, 206, 73, 73, 0, 5, 175, 193, 47, 60, 49, 125, 98, 132, 7, 116, 28, 43, 25, 91, 14, 143, 89, 14, 78, 81, 63, 103, 37, 212, 0, 117, 31, 95, 66, 47, 79, 157, 141, 149, 112, 161, 38, 159, 104, 175, 65, 163, 75, 7, 166, 184, 203, 152, 30, 222, 74 },
                            Phone = "0796526595",
                            RefreshToken = "",
                            Role = "Accountant"
                        },
                        new
                        {
                            Id = 6,
                            FullName = "Nguyen Van B",
                            PasswordHash = new byte[] { 5, 48, 29, 215, 135, 173, 49, 210, 184, 34, 9, 116, 156, 20, 141, 248, 51, 20, 34, 249, 77, 90, 45, 204, 58, 50, 181, 75, 36, 7, 39, 80, 210, 155, 46, 215, 98, 161, 208, 75, 78, 68, 163, 52, 182, 209, 66, 25, 242, 213, 110, 50, 67, 8, 68, 230, 44, 2, 143, 240, 95, 169, 36, 45 },
                            PasswordSalt = new byte[] { 208, 103, 149, 135, 5, 157, 244, 243, 84, 188, 102, 248, 118, 187, 139, 91, 200, 12, 114, 110, 88, 92, 35, 157, 163, 142, 182, 76, 43, 65, 255, 48, 117, 21, 43, 26, 6, 89, 112, 253, 51, 112, 99, 44, 10, 235, 126, 157, 28, 222, 205, 219, 30, 229, 49, 91, 31, 36, 27, 33, 235, 33, 196, 7, 238, 163, 207, 189, 81, 16, 150, 216, 206, 73, 73, 0, 5, 175, 193, 47, 60, 49, 125, 98, 132, 7, 116, 28, 43, 25, 91, 14, 143, 89, 14, 78, 81, 63, 103, 37, 212, 0, 117, 31, 95, 66, 47, 79, 157, 141, 149, 112, 161, 38, 159, 104, 175, 65, 163, 75, 7, 166, 184, 203, 152, 30, 222, 74 },
                            Phone = "0955797871",
                            RefreshToken = "",
                            Role = "user"
                        },
                        new
                        {
                            Id = 7,
                            FullName = "Nguyen Van C",
                            PasswordHash = new byte[] { 5, 48, 29, 215, 135, 173, 49, 210, 184, 34, 9, 116, 156, 20, 141, 248, 51, 20, 34, 249, 77, 90, 45, 204, 58, 50, 181, 75, 36, 7, 39, 80, 210, 155, 46, 215, 98, 161, 208, 75, 78, 68, 163, 52, 182, 209, 66, 25, 242, 213, 110, 50, 67, 8, 68, 230, 44, 2, 143, 240, 95, 169, 36, 45 },
                            PasswordSalt = new byte[] { 208, 103, 149, 135, 5, 157, 244, 243, 84, 188, 102, 248, 118, 187, 139, 91, 200, 12, 114, 110, 88, 92, 35, 157, 163, 142, 182, 76, 43, 65, 255, 48, 117, 21, 43, 26, 6, 89, 112, 253, 51, 112, 99, 44, 10, 235, 126, 157, 28, 222, 205, 219, 30, 229, 49, 91, 31, 36, 27, 33, 235, 33, 196, 7, 238, 163, 207, 189, 81, 16, 150, 216, 206, 73, 73, 0, 5, 175, 193, 47, 60, 49, 125, 98, 132, 7, 116, 28, 43, 25, 91, 14, 143, 89, 14, 78, 81, 63, 103, 37, 212, 0, 117, 31, 95, 66, 47, 79, 157, 141, 149, 112, 161, 38, 159, 104, 175, 65, 163, 75, 7, 166, 184, 203, 152, 30, 222, 74 },
                            Phone = "0689764123",
                            RefreshToken = "",
                            Role = "user"
                        });
                });

            modelBuilder.Entity("Lib.Entities.Address_store", b =>
                {
                    b.HasOne("Lib.Entities.Addresses", "Addresses")
                        .WithOne("Address_Store")
                        .HasForeignKey("Lib.Entities.Address_store", "Address_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Address_store_Addresses");

                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Lib.Entities.Call_charges", b =>
                {
                    b.HasOne("Lib.Entities.Duration", "Duration")
                        .WithMany("Call_Charges")
                        .HasForeignKey("Duration_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Call_charges_Duration");

                    b.Navigation("Duration");
                });

            modelBuilder.Entity("Lib.Entities.Contract_Service", b =>
                {
                    b.HasOne("Lib.Entities.Order", "Order")
                        .WithOne("Contract_Service")
                        .HasForeignKey("Lib.Entities.Contract_Service", "Order_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Contract_Services_Order");

                    b.HasOne("Lib.Entities.TP_contract", "TP_Contract")
                        .WithMany("Contract_Services")
                        .HasForeignKey("TP_Contract_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Contract_Services_TpContractor");

                    b.Navigation("Order");

                    b.Navigation("TP_Contract");
                });

            modelBuilder.Entity("Lib.Entities.Duration", b =>
                {
                    b.HasOne("Lib.Entities.Package", "Package")
                        .WithMany("Durations")
                        .HasForeignKey("Package_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Duration_Package");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("Lib.Entities.Duration_callCharges", b =>
                {
                    b.HasOne("Lib.Entities.Call_charges", "Call_charges")
                        .WithMany("Duration_CallCharges")
                        .HasForeignKey("Call_charges_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Duration_callCharges_Call_charges");

                    b.HasOne("Lib.Entities.Duration", "Duration")
                        .WithMany("Duration_callChargeses")
                        .HasForeignKey("Duration_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Duration_callCharges_Duration");

                    b.Navigation("Call_charges");

                    b.Navigation("Duration");
                });

            modelBuilder.Entity("Lib.Entities.Employee", b =>
                {
                    b.HasOne("Lib.Entities.Address_store", "Address_store")
                        .WithMany("Employees")
                        .HasForeignKey("Address_store_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Emp_Address_store");

                    b.HasOne("Lib.Entities.Employee_type", "Employee_type")
                        .WithMany("Employees")
                        .HasForeignKey("Employee_type_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Emp_Emp_type");

                    b.Navigation("Address_store");

                    b.Navigation("Employee_type");
                });

            modelBuilder.Entity("Lib.Entities.ImportReceipt", b =>
                {
                    b.HasOne("Lib.Entities.Product", "Product")
                        .WithMany("ImportReceipt")
                        .HasForeignKey("Product_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Product_ImportReceipt");

                    b.HasOne("Lib.Entities.Storage", "Storage")
                        .WithMany("import_receipt")
                        .HasForeignKey("Storage_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_ImportReceipt_Storage");

                    b.Navigation("Product");

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("Lib.Entities.Order", b =>
                {
                    b.HasOne("Lib.Entities.Addresses", "Addresses")
                        .WithOne("Order")
                        .HasForeignKey("Lib.Entities.Order", "Addresses_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Order_Address_Id");

                    b.HasOne("Lib.Entities.Coupon", "Coupon")
                        .WithMany("Orders")
                        .HasForeignKey("Coupon_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Order_Coupon");

                    b.HasOne("Lib.Entities.Duration", "Duration")
                        .WithMany("Orders")
                        .HasForeignKey("Duration_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Order_Duration");

                    b.HasOne("Lib.Entities.Duration_callCharges", "Duration_callCharges")
                        .WithMany("Orders")
                        .HasForeignKey("Duration_callCharges_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Order_Duration_callCharges");

                    b.HasOne("Lib.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Order_User");

                    b.Navigation("Addresses");

                    b.Navigation("Coupon");

                    b.Navigation("Duration");

                    b.Navigation("Duration_callCharges");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lib.Entities.Order_handler", b =>
                {
                    b.HasOne("Lib.Entities.Address_store", "Address_store")
                        .WithMany("Order_handlers")
                        .HasForeignKey("Address_store_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Order_handle_Address_store");

                    b.HasOne("Lib.Entities.Employee", "Employee")
                        .WithMany("Order_handlers")
                        .HasForeignKey("Employee_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Order_handle_Employee");

                    b.HasOne("Lib.Entities.Order", "Order")
                        .WithMany("Order_handlers")
                        .HasForeignKey("Order_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Order_handle_Order");

                    b.Navigation("Address_store");

                    b.Navigation("Employee");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Lib.Entities.Package", b =>
                {
                    b.HasOne("Lib.Entities.Connect_type", "Connect_type")
                        .WithMany("Packages")
                        .HasForeignKey("Connect_type_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Packages_Connect_type");

                    b.Navigation("Connect_type");
                });

            modelBuilder.Entity("Lib.Entities.Payment", b =>
                {
                    b.HasOne("Lib.Entities.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("Order_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Payment_Order");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Lib.Entities.Product", b =>
                {
                    b.HasOne("Lib.Entities.Connect_type", "Connect_type")
                        .WithMany("Products")
                        .HasForeignKey("Connect_type_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Product_ConnectType");

                    b.HasOne("Lib.Entities.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("Supplier_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Product_Supplier");

                    b.Navigation("Connect_type");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Lib.Entities.Storage", b =>
                {
                    b.HasOne("Lib.Entities.Address_store", "Address_Store")
                        .WithOne("Storage")
                        .HasForeignKey("Lib.Entities.Storage", "Address_store_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Storage_Address_store");

                    b.Navigation("Address_Store");
                });

            modelBuilder.Entity("Lib.Entities.User", b =>
                {
                    b.HasOne("Lib.Entities.Employee", "Employees")
                        .WithOne("User")
                        .HasForeignKey("Lib.Entities.User", "Employees_Id")
                        .HasConstraintName("FK_User_Employee");

                    b.HasOne("Lib.Entities.TP_contract", "TP_contract")
                        .WithOne("User")
                        .HasForeignKey("Lib.Entities.User", "TP_contract_Id")
                        .HasConstraintName("FK_User_TpContractor");

                    b.Navigation("Employees");

                    b.Navigation("TP_contract");
                });

            modelBuilder.Entity("Lib.Entities.Address_store", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Order_handlers");

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("Lib.Entities.Addresses", b =>
                {
                    b.Navigation("Address_Store");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Lib.Entities.Call_charges", b =>
                {
                    b.Navigation("Duration_CallCharges");
                });

            modelBuilder.Entity("Lib.Entities.Connect_type", b =>
                {
                    b.Navigation("Packages");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Lib.Entities.Coupon", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Lib.Entities.Duration", b =>
                {
                    b.Navigation("Call_Charges");

                    b.Navigation("Duration_callChargeses");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Lib.Entities.Duration_callCharges", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Lib.Entities.Employee", b =>
                {
                    b.Navigation("Order_handlers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lib.Entities.Employee_type", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Lib.Entities.Order", b =>
                {
                    b.Navigation("Contract_Service");

                    b.Navigation("Order_handlers");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Lib.Entities.Package", b =>
                {
                    b.Navigation("Durations");
                });

            modelBuilder.Entity("Lib.Entities.Product", b =>
                {
                    b.Navigation("ImportReceipt");
                });

            modelBuilder.Entity("Lib.Entities.Storage", b =>
                {
                    b.Navigation("import_receipt");
                });

            modelBuilder.Entity("Lib.Entities.Supplier", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Lib.Entities.TP_contract", b =>
                {
                    b.Navigation("Contract_Services");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lib.Entities.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
